// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_enum.proto

#ifndef PROTOBUF_common_5fenum_2eproto__INCLUDED
#define PROTOBUF_common_5fenum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace lm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_5fenum_2eproto();
void protobuf_AssignDesc_common_5fenum_2eproto();
void protobuf_ShutdownFile_common_5fenum_2eproto();


enum _AssetType {
  ASSET_COIN = 1,
  ASSET_GOLD = 2,
  ASSET_FLAG = 3,
  ASSET_REPUTATION = 4,
  ASSET_GOODS = 5,
  ASSET_EXPRESSMAN = 6,
  ASSET_EXPRESSMAN_COIN = 7,
  ASSET_ARENA_COIN = 8,
  ASSET_SKILL_BOOK = 9,
  ASSET_ARENA_MATCH = 10,
  ASSET_TICKET = 11,
  ASSET_PLUNDER = 12,
  ASSET_ACITIVTY = 13,
  ASSET_OFFICE_INVADE = 14,
  ASSET_TRADE_ROAD_COIN = 15,
  ASSET_PLUNDER_COIN = 16,
  ASSET_UNION_COIN = 17,
  ASSET_STREET_COIN = 18,
  ASSET_COUNTRY_BATTLE = 19,
  ASSET_MATERIAL_SOURCE = 20
};
bool _AssetType_IsValid(int value);
const _AssetType _AssetType_MIN = ASSET_COIN;
const _AssetType _AssetType_MAX = ASSET_MATERIAL_SOURCE;
const int _AssetType_ARRAYSIZE = _AssetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _AssetType_descriptor();
inline const ::std::string& _AssetType_Name(_AssetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _AssetType_descriptor(), value);
}
inline bool _AssetType_Parse(
    const ::std::string& name, _AssetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_AssetType>(
    _AssetType_descriptor(), name, value);
}
enum _AssetSource {
  ASSET_SOURCE_EXPRESSMAN = 1
};
bool _AssetSource_IsValid(int value);
const _AssetSource _AssetSource_MIN = ASSET_SOURCE_EXPRESSMAN;
const _AssetSource _AssetSource_MAX = ASSET_SOURCE_EXPRESSMAN;
const int _AssetSource_ARRAYSIZE = _AssetSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* _AssetSource_descriptor();
inline const ::std::string& _AssetSource_Name(_AssetSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    _AssetSource_descriptor(), value);
}
inline bool _AssetSource_Parse(
    const ::std::string& name, _AssetSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_AssetSource>(
    _AssetSource_descriptor(), name, value);
}
enum _RobotType {
  ROBOT_TYPE_ARENA = 1,
  ROBOT_TYPE_PLUNDER = 2,
  ROBOT_TYPE_TRADE_ROAD = 3,
  ROBOT_TYPE_COUNTRY_BATTLE = 4
};
bool _RobotType_IsValid(int value);
const _RobotType _RobotType_MIN = ROBOT_TYPE_ARENA;
const _RobotType _RobotType_MAX = ROBOT_TYPE_COUNTRY_BATTLE;
const int _RobotType_ARRAYSIZE = _RobotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RobotType_descriptor();
inline const ::std::string& _RobotType_Name(_RobotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RobotType_descriptor(), value);
}
inline bool _RobotType_Parse(
    const ::std::string& name, _RobotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RobotType>(
    _RobotType_descriptor(), name, value);
}
enum _SystemId {
  PLUNDER_SYSTEM = 1,
  DAILY_TASK_SYSTEM = 2,
  KITCHEN_SYSTEM = 3,
  WORKSHOP_SYSTEM = 4,
  ESCORT_SYSTEM = 5,
  SHOP_SYSTEM = 6,
  CARRIER_SYSTEM = 7,
  ACTIVITY_SYSTEM = 8,
  SPONSOR_SYSTEM = 9,
  ARENA_PK_SYSTEM = 10,
  RECRUIT_SYSTEM = 11,
  EXCHANGE_COIN = 12,
  EXCHANGE_FLAG = 13,
  BAG_SYSTEM = 14,
  ACTIVITY_RACING_SYSTEM = 16,
  ACTIVITY_MINING_SYSTEM = 17,
  ACTIVITY_HUNTING_SYSTEM = 18,
  ACTIVITY_DEFENSE_SYSTEM = 19,
  EXPRESSMAN_SYSTEM = 21,
  ORDER_LIST_SYSTEM = 22,
  ARENA_SYSTEM = 24,
  ARENA_SHOP = 25,
  GOLD_SHOP = 26,
  TRADE_ROAD = 27,
  OFFICE_INVADE_SYSTEM = 29,
  UNIONS_SYSTEM = 40,
  STREET_SYSTEM = 45,
  WORLD_BOSS_SYSTEM = 46,
  COUNTRY_BATTLE_SYSTEM = 49
};
bool _SystemId_IsValid(int value);
const _SystemId _SystemId_MIN = PLUNDER_SYSTEM;
const _SystemId _SystemId_MAX = COUNTRY_BATTLE_SYSTEM;
const int _SystemId_ARRAYSIZE = _SystemId_MAX + 1;

const ::google::protobuf::EnumDescriptor* _SystemId_descriptor();
inline const ::std::string& _SystemId_Name(_SystemId value) {
  return ::google::protobuf::internal::NameOfEnum(
    _SystemId_descriptor(), value);
}
inline bool _SystemId_Parse(
    const ::std::string& name, _SystemId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_SystemId>(
    _SystemId_descriptor(), name, value);
}
enum _AdvanceMatchResult {
  ADVANCE_MATCH_FAILED = 0,
  ADVANCE_MATCH_SUCCESS = 1
};
bool _AdvanceMatchResult_IsValid(int value);
const _AdvanceMatchResult _AdvanceMatchResult_MIN = ADVANCE_MATCH_FAILED;
const _AdvanceMatchResult _AdvanceMatchResult_MAX = ADVANCE_MATCH_SUCCESS;
const int _AdvanceMatchResult_ARRAYSIZE = _AdvanceMatchResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* _AdvanceMatchResult_descriptor();
inline const ::std::string& _AdvanceMatchResult_Name(_AdvanceMatchResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    _AdvanceMatchResult_descriptor(), value);
}
inline bool _AdvanceMatchResult_Parse(
    const ::std::string& name, _AdvanceMatchResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_AdvanceMatchResult>(
    _AdvanceMatchResult_descriptor(), name, value);
}
enum _ArenaSeasonIndex {
  CURR_ARENA_SEASON = 0,
  LAST_ARENA_SEASON = 1
};
bool _ArenaSeasonIndex_IsValid(int value);
const _ArenaSeasonIndex _ArenaSeasonIndex_MIN = CURR_ARENA_SEASON;
const _ArenaSeasonIndex _ArenaSeasonIndex_MAX = LAST_ARENA_SEASON;
const int _ArenaSeasonIndex_ARRAYSIZE = _ArenaSeasonIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ArenaSeasonIndex_descriptor();
inline const ::std::string& _ArenaSeasonIndex_Name(_ArenaSeasonIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ArenaSeasonIndex_descriptor(), value);
}
inline bool _ArenaSeasonIndex_Parse(
    const ::std::string& name, _ArenaSeasonIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ArenaSeasonIndex>(
    _ArenaSeasonIndex_descriptor(), name, value);
}
enum _ArenaOpponentType {
  ARENA_OPPONENT_PLAYER = 1,
  ARENA_OPPONENT_ROBOT = 2
};
bool _ArenaOpponentType_IsValid(int value);
const _ArenaOpponentType _ArenaOpponentType_MIN = ARENA_OPPONENT_PLAYER;
const _ArenaOpponentType _ArenaOpponentType_MAX = ARENA_OPPONENT_ROBOT;
const int _ArenaOpponentType_ARRAYSIZE = _ArenaOpponentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ArenaOpponentType_descriptor();
inline const ::std::string& _ArenaOpponentType_Name(_ArenaOpponentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ArenaOpponentType_descriptor(), value);
}
inline bool _ArenaOpponentType_Parse(
    const ::std::string& name, _ArenaOpponentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ArenaOpponentType>(
    _ArenaOpponentType_descriptor(), name, value);
}
enum _CarrierUp {
  CARRIER_UP_QUALITY = 0,
  CARRIER_UP_LEVEL_HP = 1,
  CARRIER_UP_LEVEL_ATTACK = 2,
  CARRIER_UP_LEVEL_SPEED = 3,
  CARRIER_UP_LEVEL_ATT_SPEED = 4
};
bool _CarrierUp_IsValid(int value);
const _CarrierUp _CarrierUp_MIN = CARRIER_UP_QUALITY;
const _CarrierUp _CarrierUp_MAX = CARRIER_UP_LEVEL_ATT_SPEED;
const int _CarrierUp_ARRAYSIZE = _CarrierUp_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CarrierUp_descriptor();
inline const ::std::string& _CarrierUp_Name(_CarrierUp value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CarrierUp_descriptor(), value);
}
inline bool _CarrierUp_Parse(
    const ::std::string& name, _CarrierUp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CarrierUp>(
    _CarrierUp_descriptor(), name, value);
}
enum _CDKeyError {
  CDKEY_ERROR_INVALID_CDKEY = 1,
  CDKEY_ERROR_CDKEY_USED = 2,
  CDKEY_ERROR_SAME_TYPE_USED = 3,
  CDKEY_ERROR_UNSUPPORTED_CHANNEL = 4,
  CDKEY_ERROR_UNSUPPORTED_GAMESERVER = 5,
  CDKEY_ERROR_CDKEY_OVERDUE = 6,
  CDKEY_ERROR_CDKEY_NO_REMAINING_COUNT = 7,
  CDKEY_ERROR_OTHER_ERROR = 8
};
bool _CDKeyError_IsValid(int value);
const _CDKeyError _CDKeyError_MIN = CDKEY_ERROR_INVALID_CDKEY;
const _CDKeyError _CDKeyError_MAX = CDKEY_ERROR_OTHER_ERROR;
const int _CDKeyError_ARRAYSIZE = _CDKeyError_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CDKeyError_descriptor();
inline const ::std::string& _CDKeyError_Name(_CDKeyError value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CDKeyError_descriptor(), value);
}
inline bool _CDKeyError_Parse(
    const ::std::string& name, _CDKeyError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CDKeyError>(
    _CDKeyError_descriptor(), name, value);
}
enum _DailyTaskType {
  DAILY_TASK_COMPLETE_ESCORT = 1,
  DAILY_TASK_UPLEVEL_EQUIPMENT = 2,
  DAILY_TASK_UPLEVEL_SKILL = 3,
  DAILY_TASK_COMPLETE_PLUNDER = 4,
  DAILY_TASK_EAT_FOOD = 5,
  DAILY_TASK_COMPLETE_ARENA_COMBAT = 6,
  DAILY_TASK_COMPLETE_ACTIVITY = 7,
  DAILY_TASK_BUY_OUTLETS = 8,
  DAILY_TASK_GOLD_EXCHANGE_COIN = 9,
  DAILY_TASK_PLUNDER_SUCCESS = 10,
  DAILY_TASK_ESCORT_THREE_STARS = 11,
  DAILY_TASK_UPLEVEL_CARRIER = 12,
  DAILY_TASK_COLLECT_KITCHEN_FOOD = 13,
  DAILY_TASK_USE_HEWU = 14,
  DAILY_TASK_DEFUSE_MINE = 15,
  DAILY_TASK_DESTRUCT_ROLLING_STONE = 16,
  DAILY_TASK_WIN_ARENA_COMBAT = 17,
  DAILY_TASK_CAST_CARRIER_SKILL = 18,
  DAILY_TASK_ASSIGN_TASKS = 19,
  DAILY_TASK_DEFUSE_GEAR_MINE = 20,
  DAILY_TASK_BUY_MATERIAL = 21,
  DAILY_TASK_SIGN_SPONSOR = 22,
  DAILY_TASK_COLLECT_WORKSHOP = 23,
  DAILY_TASK_HUNT_ANIMAL = 24,
  DAILY_TASK_KILL_ROBBER = 25,
  DAILY_TASK_DESTRUCT_FENCE = 26,
  DAILY_TASK_MINING_ORE = 27,
  DAILY_TASK_RECRUIT_EXPRESSMAN = 28,
  DAILY_TASK_HELP_FRIEND = 29,
  DAILY_TASK_COMPLETE_RACING = 30,
  DAILY_TASK_COMPLETE_MINING = 31,
  DAILY_TASK_COMPLETE_HUNTING = 32,
  DAILY_TASK_COMPLETE_DEFENSE = 33,
  DAILY_TASK_OFFICE_INVADE = 34,
  DAILY_TASK_TOUGHEN_EXPRESSMAN = 36,
  DAILY_TASK_CARRIER_UPGRADE = 37,
  DAILY_TASK_TRADE_ROAD_OPERATION = 38,
  DAILY_TASK_TRADE_ROAD_ADVANCED_OPERATION = 39,
  DAILY_TASK_RAFFLE = 40,
  DAILY_TASK_COMPLETE_ELITE_STORY = 41,
  DAILY_TASK_COUNTRY_BATTLE = 42,
  DAILY_TASK_SIMULATE_FIGHT = 43
};
bool _DailyTaskType_IsValid(int value);
const _DailyTaskType _DailyTaskType_MIN = DAILY_TASK_COMPLETE_ESCORT;
const _DailyTaskType _DailyTaskType_MAX = DAILY_TASK_SIMULATE_FIGHT;
const int _DailyTaskType_ARRAYSIZE = _DailyTaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _DailyTaskType_descriptor();
inline const ::std::string& _DailyTaskType_Name(_DailyTaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _DailyTaskType_descriptor(), value);
}
inline bool _DailyTaskType_Parse(
    const ::std::string& name, _DailyTaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_DailyTaskType>(
    _DailyTaskType_descriptor(), name, value);
}
enum _EscortType {
  ESCORT_NORMAL_TASK = 0,
  ESCORT_REPLENISHMENT_TASK = 1,
  ESCORT_ARENA = 2,
  ESCORT_ACTIVITY = 3,
  ESCORT_RACING = 4,
  ESCORT_MINING = 5,
  ESCORT_HUNTING = 6,
  ESCORT_DEFENSE = 7,
  ESCORT_PLUNDER_ASSIGN = 8,
  ESCORT_DEMONSTRATION = 9,
  ESCORT_STORY_TASK = 10,
  ESCORT_TRADE_ROAD = 11,
  ESCORT_INVADE = 12,
  ESCORT_UNION_TRAP = 13,
  ESCORT_WORLD_BOSS = 14,
  ESCORT_SIMULATE_FIGHT = 15,
  ESCORT_COUNTRY_BATTLE = 16
};
bool _EscortType_IsValid(int value);
const _EscortType _EscortType_MIN = ESCORT_NORMAL_TASK;
const _EscortType _EscortType_MAX = ESCORT_COUNTRY_BATTLE;
const int _EscortType_ARRAYSIZE = _EscortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _EscortType_descriptor();
inline const ::std::string& _EscortType_Name(_EscortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _EscortType_descriptor(), value);
}
inline bool _EscortType_Parse(
    const ::std::string& name, _EscortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_EscortType>(
    _EscortType_descriptor(), name, value);
}
enum _EscortEndStatus {
  ESCORT_END_SUCCESS = 0,
  ESCORT_END_FAILURE = 1,
  ESCORT_END_PLUNDERED = 2,
  ESCORT_END_TIME_OUT = 3,
  ESCORT_END_WORLD_BOSS_DEFEATED = 10,
  ESCORT_END_WORLD_BOSS_CLOSED = 11
};
bool _EscortEndStatus_IsValid(int value);
const _EscortEndStatus _EscortEndStatus_MIN = ESCORT_END_SUCCESS;
const _EscortEndStatus _EscortEndStatus_MAX = ESCORT_END_WORLD_BOSS_CLOSED;
const int _EscortEndStatus_ARRAYSIZE = _EscortEndStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _EscortEndStatus_descriptor();
inline const ::std::string& _EscortEndStatus_Name(_EscortEndStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _EscortEndStatus_descriptor(), value);
}
inline bool _EscortEndStatus_Parse(
    const ::std::string& name, _EscortEndStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_EscortEndStatus>(
    _EscortEndStatus_descriptor(), name, value);
}
enum _UnionJoinedStatus {
  UNION_STATUS_NORMAL = 1,
  UNION_STATUS_DISSOLUTIONED = 2,
  UNION_STATUS_OUT = 3
};
bool _UnionJoinedStatus_IsValid(int value);
const _UnionJoinedStatus _UnionJoinedStatus_MIN = UNION_STATUS_NORMAL;
const _UnionJoinedStatus _UnionJoinedStatus_MAX = UNION_STATUS_OUT;
const int _UnionJoinedStatus_ARRAYSIZE = _UnionJoinedStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionJoinedStatus_descriptor();
inline const ::std::string& _UnionJoinedStatus_Name(_UnionJoinedStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionJoinedStatus_descriptor(), value);
}
inline bool _UnionJoinedStatus_Parse(
    const ::std::string& name, _UnionJoinedStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionJoinedStatus>(
    _UnionJoinedStatus_descriptor(), name, value);
}
enum _UnionMemberType {
  UNION_PRESIDENT = 1,
  UNION_ELDERS = 2,
  UNION_MEMBER = 3
};
bool _UnionMemberType_IsValid(int value);
const _UnionMemberType _UnionMemberType_MIN = UNION_PRESIDENT;
const _UnionMemberType _UnionMemberType_MAX = UNION_MEMBER;
const int _UnionMemberType_ARRAYSIZE = _UnionMemberType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionMemberType_descriptor();
inline const ::std::string& _UnionMemberType_Name(_UnionMemberType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionMemberType_descriptor(), value);
}
inline bool _UnionMemberType_Parse(
    const ::std::string& name, _UnionMemberType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionMemberType>(
    _UnionMemberType_descriptor(), name, value);
}
enum _UnionMemberOptType {
  UNION_PROMOTION_ELDERS = 1,
  UNION_CANCEL_ELDERS = 2
};
bool _UnionMemberOptType_IsValid(int value);
const _UnionMemberOptType _UnionMemberOptType_MIN = UNION_PROMOTION_ELDERS;
const _UnionMemberOptType _UnionMemberOptType_MAX = UNION_CANCEL_ELDERS;
const int _UnionMemberOptType_ARRAYSIZE = _UnionMemberOptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionMemberOptType_descriptor();
inline const ::std::string& _UnionMemberOptType_Name(_UnionMemberOptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionMemberOptType_descriptor(), value);
}
inline bool _UnionMemberOptType_Parse(
    const ::std::string& name, _UnionMemberOptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionMemberOptType>(
    _UnionMemberOptType_descriptor(), name, value);
}
enum _UnionErrorType {
  UNION_KICKED_OUT = 1,
  UNION_DISSOLUTIONED = 2,
  UNION_MEMBER_OUT = 3,
  UNION_IN_UNION = 4,
  UNION_AUTHORITY_FAILED = 5
};
bool _UnionErrorType_IsValid(int value);
const _UnionErrorType _UnionErrorType_MIN = UNION_KICKED_OUT;
const _UnionErrorType _UnionErrorType_MAX = UNION_AUTHORITY_FAILED;
const int _UnionErrorType_ARRAYSIZE = _UnionErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionErrorType_descriptor();
inline const ::std::string& _UnionErrorType_Name(_UnionErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionErrorType_descriptor(), value);
}
inline bool _UnionErrorType_Parse(
    const ::std::string& name, _UnionErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionErrorType>(
    _UnionErrorType_descriptor(), name, value);
}
enum _UnionWorshipType {
  WORSHIP_PRIMARY = 1,
  WORSHIP_MEDIUM = 2,
  WORSHIP_ADVANCED = 3
};
bool _UnionWorshipType_IsValid(int value);
const _UnionWorshipType _UnionWorshipType_MIN = WORSHIP_PRIMARY;
const _UnionWorshipType _UnionWorshipType_MAX = WORSHIP_ADVANCED;
const int _UnionWorshipType_ARRAYSIZE = _UnionWorshipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionWorshipType_descriptor();
inline const ::std::string& _UnionWorshipType_Name(_UnionWorshipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionWorshipType_descriptor(), value);
}
inline bool _UnionWorshipType_Parse(
    const ::std::string& name, _UnionWorshipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionWorshipType>(
    _UnionWorshipType_descriptor(), name, value);
}
enum _UnionApplyJoinStatus {
  UNION_APPLY_JOIN_SUCCESS = 1,
  UNION_APPLY_JOIN_NO_UNION = 2,
  UNION_APPLY_JOIN_UNION_NOT_EXIST = 3,
  UNION_APPLY_JOIN_HAS_APPLY = 4,
  UNION_APPLY_JOIN_LEVEL_DEFICIENT = 5,
  UNION_APPLY_JOIN_LIST_FULL = 6
};
bool _UnionApplyJoinStatus_IsValid(int value);
const _UnionApplyJoinStatus _UnionApplyJoinStatus_MIN = UNION_APPLY_JOIN_SUCCESS;
const _UnionApplyJoinStatus _UnionApplyJoinStatus_MAX = UNION_APPLY_JOIN_LIST_FULL;
const int _UnionApplyJoinStatus_ARRAYSIZE = _UnionApplyJoinStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionApplyJoinStatus_descriptor();
inline const ::std::string& _UnionApplyJoinStatus_Name(_UnionApplyJoinStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionApplyJoinStatus_descriptor(), value);
}
inline bool _UnionApplyJoinStatus_Parse(
    const ::std::string& name, _UnionApplyJoinStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionApplyJoinStatus>(
    _UnionApplyJoinStatus_descriptor(), name, value);
}
enum _UnionAssignResult {
  UNION_ASSIGN_SUCCESS = 1,
  UNION_ASSIGN_FAILED = 2
};
bool _UnionAssignResult_IsValid(int value);
const _UnionAssignResult _UnionAssignResult_MIN = UNION_ASSIGN_SUCCESS;
const _UnionAssignResult _UnionAssignResult_MAX = UNION_ASSIGN_FAILED;
const int _UnionAssignResult_ARRAYSIZE = _UnionAssignResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionAssignResult_descriptor();
inline const ::std::string& _UnionAssignResult_Name(_UnionAssignResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionAssignResult_descriptor(), value);
}
inline bool _UnionAssignResult_Parse(
    const ::std::string& name, _UnionAssignResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionAssignResult>(
    _UnionAssignResult_descriptor(), name, value);
}
enum _UnionManageEldersResult {
  UNION_MANAGE_ELDERS_SUCCESS = 1,
  UNION_MANAGE_ELDERS_FULL = 2
};
bool _UnionManageEldersResult_IsValid(int value);
const _UnionManageEldersResult _UnionManageEldersResult_MIN = UNION_MANAGE_ELDERS_SUCCESS;
const _UnionManageEldersResult _UnionManageEldersResult_MAX = UNION_MANAGE_ELDERS_FULL;
const int _UnionManageEldersResult_ARRAYSIZE = _UnionManageEldersResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionManageEldersResult_descriptor();
inline const ::std::string& _UnionManageEldersResult_Name(_UnionManageEldersResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionManageEldersResult_descriptor(), value);
}
inline bool _UnionManageEldersResult_Parse(
    const ::std::string& name, _UnionManageEldersResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionManageEldersResult>(
    _UnionManageEldersResult_descriptor(), name, value);
}
enum _UnionDealApplyStatus {
  UNION_DEAL_APPLY_SUCCESS = 1,
  UNION_DEAL_APPLY_FULL = 2,
  UNION_DEAL_APPLY_HAS_JOINED = 3,
  UNION_DEAL_APPLY_NOT_EXIST = 4
};
bool _UnionDealApplyStatus_IsValid(int value);
const _UnionDealApplyStatus _UnionDealApplyStatus_MIN = UNION_DEAL_APPLY_SUCCESS;
const _UnionDealApplyStatus _UnionDealApplyStatus_MAX = UNION_DEAL_APPLY_NOT_EXIST;
const int _UnionDealApplyStatus_ARRAYSIZE = _UnionDealApplyStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _UnionDealApplyStatus_descriptor();
inline const ::std::string& _UnionDealApplyStatus_Name(_UnionDealApplyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _UnionDealApplyStatus_descriptor(), value);
}
inline bool _UnionDealApplyStatus_Parse(
    const ::std::string& name, _UnionDealApplyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_UnionDealApplyStatus>(
    _UnionDealApplyStatus_descriptor(), name, value);
}
enum _RaffleGoodsType {
  RAFFLE_EXPRESSMAN = 1,
  RAFFLE_GOODS = 2,
  RAFFLE_TRANS_DEBRIS = 3
};
bool _RaffleGoodsType_IsValid(int value);
const _RaffleGoodsType _RaffleGoodsType_MIN = RAFFLE_EXPRESSMAN;
const _RaffleGoodsType _RaffleGoodsType_MAX = RAFFLE_TRANS_DEBRIS;
const int _RaffleGoodsType_ARRAYSIZE = _RaffleGoodsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RaffleGoodsType_descriptor();
inline const ::std::string& _RaffleGoodsType_Name(_RaffleGoodsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RaffleGoodsType_descriptor(), value);
}
inline bool _RaffleGoodsType_Parse(
    const ::std::string& name, _RaffleGoodsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RaffleGoodsType>(
    _RaffleGoodsType_descriptor(), name, value);
}
enum _RafflePayType {
  EXPRESSMAN_COIN_RAFFLE = 1,
  GOLD_RAFFLE = 2,
  SOUL_GOLD_RAFFLE = 3
};
bool _RafflePayType_IsValid(int value);
const _RafflePayType _RafflePayType_MIN = EXPRESSMAN_COIN_RAFFLE;
const _RafflePayType _RafflePayType_MAX = SOUL_GOLD_RAFFLE;
const int _RafflePayType_ARRAYSIZE = _RafflePayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RafflePayType_descriptor();
inline const ::std::string& _RafflePayType_Name(_RafflePayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RafflePayType_descriptor(), value);
}
inline bool _RafflePayType_Parse(
    const ::std::string& name, _RafflePayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RafflePayType>(
    _RafflePayType_descriptor(), name, value);
}
enum _RaffleCountType {
  RAFFLE_ONE = 1,
  RAFFLE_TEN = 2
};
bool _RaffleCountType_IsValid(int value);
const _RaffleCountType _RaffleCountType_MIN = RAFFLE_ONE;
const _RaffleCountType _RaffleCountType_MAX = RAFFLE_TEN;
const int _RaffleCountType_ARRAYSIZE = _RaffleCountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RaffleCountType_descriptor();
inline const ::std::string& _RaffleCountType_Name(_RaffleCountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RaffleCountType_descriptor(), value);
}
inline bool _RaffleCountType_Parse(
    const ::std::string& name, _RaffleCountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RaffleCountType>(
    _RaffleCountType_descriptor(), name, value);
}
enum _RaffleSoulGoodsType {
  RAFFLE_SOUL_EXPRESSMAN = 1,
  RAFFLE_SOUL_DEBRI_1 = 2,
  RAFFLE_SOUL_DEBRI_2 = 3,
  RAFFLE_SOUL_DEBRI_3 = 4,
  RAFFLE_SOUL_NORMAL = 5
};
bool _RaffleSoulGoodsType_IsValid(int value);
const _RaffleSoulGoodsType _RaffleSoulGoodsType_MIN = RAFFLE_SOUL_EXPRESSMAN;
const _RaffleSoulGoodsType _RaffleSoulGoodsType_MAX = RAFFLE_SOUL_NORMAL;
const int _RaffleSoulGoodsType_ARRAYSIZE = _RaffleSoulGoodsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RaffleSoulGoodsType_descriptor();
inline const ::std::string& _RaffleSoulGoodsType_Name(_RaffleSoulGoodsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RaffleSoulGoodsType_descriptor(), value);
}
inline bool _RaffleSoulGoodsType_Parse(
    const ::std::string& name, _RaffleSoulGoodsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RaffleSoulGoodsType>(
    _RaffleSoulGoodsType_descriptor(), name, value);
}
enum _RecruitPermitType {
  FIRST_RECRUIT_PERMIT = 1,
  SECOND_RECRUIT_PERMIT = 2
};
bool _RecruitPermitType_IsValid(int value);
const _RecruitPermitType _RecruitPermitType_MIN = FIRST_RECRUIT_PERMIT;
const _RecruitPermitType _RecruitPermitType_MAX = SECOND_RECRUIT_PERMIT;
const int _RecruitPermitType_ARRAYSIZE = _RecruitPermitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RecruitPermitType_descriptor();
inline const ::std::string& _RecruitPermitType_Name(_RecruitPermitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RecruitPermitType_descriptor(), value);
}
inline bool _RecruitPermitType_Parse(
    const ::std::string& name, _RecruitPermitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RecruitPermitType>(
    _RecruitPermitType_descriptor(), name, value);
}
enum _ToughenExpressmanType {
  COMMON_TOUGHEN = 1,
  ADVANCED_TOUGHEN = 2,
  ULTIMATE_TOUGHEN = 3
};
bool _ToughenExpressmanType_IsValid(int value);
const _ToughenExpressmanType _ToughenExpressmanType_MIN = COMMON_TOUGHEN;
const _ToughenExpressmanType _ToughenExpressmanType_MAX = ULTIMATE_TOUGHEN;
const int _ToughenExpressmanType_ARRAYSIZE = _ToughenExpressmanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ToughenExpressmanType_descriptor();
inline const ::std::string& _ToughenExpressmanType_Name(_ToughenExpressmanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ToughenExpressmanType_descriptor(), value);
}
inline bool _ToughenExpressmanType_Parse(
    const ::std::string& name, _ToughenExpressmanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ToughenExpressmanType>(
    _ToughenExpressmanType_descriptor(), name, value);
}
enum _Status {
  SUCCESS = 0,
  CHARACTER_NOT_EXIST = 1,
  DUPLICATE_NAME = 2,
  SENSITIVE_WORD = 3,
  SESSION_EXPIRED = 4
};
bool _Status_IsValid(int value);
const _Status _Status_MIN = SUCCESS;
const _Status _Status_MAX = SESSION_EXPIRED;
const int _Status_ARRAYSIZE = _Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* _Status_descriptor();
inline const ::std::string& _Status_Name(_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    _Status_descriptor(), value);
}
inline bool _Status_Parse(
    const ::std::string& name, _Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_Status>(
    _Status_descriptor(), name, value);
}
enum _OfficeInvadeFailureReason {
  OFFICE_INVADE_FAILURE_NO_DICE = 1,
  OFFICE_INVADE_FAILURE_ATTACK_TIMEOUT = 2,
  OFFICE_INVADE_FAILURE_NO_EXPRESSMEN = 3,
  OFFICE_INVADE_FAILURE_PLAYER_CANCEL = 4
};
bool _OfficeInvadeFailureReason_IsValid(int value);
const _OfficeInvadeFailureReason _OfficeInvadeFailureReason_MIN = OFFICE_INVADE_FAILURE_NO_DICE;
const _OfficeInvadeFailureReason _OfficeInvadeFailureReason_MAX = OFFICE_INVADE_FAILURE_PLAYER_CANCEL;
const int _OfficeInvadeFailureReason_ARRAYSIZE = _OfficeInvadeFailureReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* _OfficeInvadeFailureReason_descriptor();
inline const ::std::string& _OfficeInvadeFailureReason_Name(_OfficeInvadeFailureReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    _OfficeInvadeFailureReason_descriptor(), value);
}
inline bool _OfficeInvadeFailureReason_Parse(
    const ::std::string& name, _OfficeInvadeFailureReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_OfficeInvadeFailureReason>(
    _OfficeInvadeFailureReason_descriptor(), name, value);
}
enum _FortType {
  FORT_TYPE_MINI = 1,
  FORT_TYPE_STORAGE = 2
};
bool _FortType_IsValid(int value);
const _FortType _FortType_MIN = FORT_TYPE_MINI;
const _FortType _FortType_MAX = FORT_TYPE_STORAGE;
const int _FortType_ARRAYSIZE = _FortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _FortType_descriptor();
inline const ::std::string& _FortType_Name(_FortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _FortType_descriptor(), value);
}
inline bool _FortType_Parse(
    const ::std::string& name, _FortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_FortType>(
    _FortType_descriptor(), name, value);
}
enum _GridEventType {
  GRID_EVENT_NOTHING = -1,
  GRID_EVENT_GIFT = 1,
  GRID_EVENT_RANDOM = 2,
  GRID_EVENT_DICE = 3,
  GRID_EVENT_TRAP = 4,
  GRID_EVENT_MINI_FORT = 5,
  GRID_EVENT_FORT = 6
};
bool _GridEventType_IsValid(int value);
const _GridEventType _GridEventType_MIN = GRID_EVENT_NOTHING;
const _GridEventType _GridEventType_MAX = GRID_EVENT_FORT;
const int _GridEventType_ARRAYSIZE = _GridEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _GridEventType_descriptor();
inline const ::std::string& _GridEventType_Name(_GridEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _GridEventType_descriptor(), value);
}
inline bool _GridEventType_Parse(
    const ::std::string& name, _GridEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_GridEventType>(
    _GridEventType_descriptor(), name, value);
}
enum _GridTrapEventType {
  GRID_TRAP_EVENT_DECREASE_POWER = 1
};
bool _GridTrapEventType_IsValid(int value);
const _GridTrapEventType _GridTrapEventType_MIN = GRID_TRAP_EVENT_DECREASE_POWER;
const _GridTrapEventType _GridTrapEventType_MAX = GRID_TRAP_EVENT_DECREASE_POWER;
const int _GridTrapEventType_ARRAYSIZE = _GridTrapEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _GridTrapEventType_descriptor();
inline const ::std::string& _GridTrapEventType_Name(_GridTrapEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _GridTrapEventType_descriptor(), value);
}
inline bool _GridTrapEventType_Parse(
    const ::std::string& name, _GridTrapEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_GridTrapEventType>(
    _GridTrapEventType_descriptor(), name, value);
}
enum _GridRandEventType {
  GRID_RAND_EVENT_FORWARD = 1,
  GRID_RAND_EVENT_BACKWARD = 2,
  GRID_RAND_EVENT_INCREASE_POWER = 4
};
bool _GridRandEventType_IsValid(int value);
const _GridRandEventType _GridRandEventType_MIN = GRID_RAND_EVENT_FORWARD;
const _GridRandEventType _GridRandEventType_MAX = GRID_RAND_EVENT_INCREASE_POWER;
const int _GridRandEventType_ARRAYSIZE = _GridRandEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _GridRandEventType_descriptor();
inline const ::std::string& _GridRandEventType_Name(_GridRandEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _GridRandEventType_descriptor(), value);
}
inline bool _GridRandEventType_Parse(
    const ::std::string& name, _GridRandEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_GridRandEventType>(
    _GridRandEventType_descriptor(), name, value);
}
enum _OfficeInvadeProduceType {
  OFFICE_INVADE_EXPRESSMAN_COIN = 1,
  OFFICE_INVADE_SKILL_BOOK = 2
};
bool _OfficeInvadeProduceType_IsValid(int value);
const _OfficeInvadeProduceType _OfficeInvadeProduceType_MIN = OFFICE_INVADE_EXPRESSMAN_COIN;
const _OfficeInvadeProduceType _OfficeInvadeProduceType_MAX = OFFICE_INVADE_SKILL_BOOK;
const int _OfficeInvadeProduceType_ARRAYSIZE = _OfficeInvadeProduceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _OfficeInvadeProduceType_descriptor();
inline const ::std::string& _OfficeInvadeProduceType_Name(_OfficeInvadeProduceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _OfficeInvadeProduceType_descriptor(), value);
}
inline bool _OfficeInvadeProduceType_Parse(
    const ::std::string& name, _OfficeInvadeProduceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_OfficeInvadeProduceType>(
    _OfficeInvadeProduceType_descriptor(), name, value);
}
enum _OfficeInvadeType {
  OFFICE_INVADE_TYPE_NORMAL = 1,
  OFFICE_INVADE_TYPE_REVENGE = 2
};
bool _OfficeInvadeType_IsValid(int value);
const _OfficeInvadeType _OfficeInvadeType_MIN = OFFICE_INVADE_TYPE_NORMAL;
const _OfficeInvadeType _OfficeInvadeType_MAX = OFFICE_INVADE_TYPE_REVENGE;
const int _OfficeInvadeType_ARRAYSIZE = _OfficeInvadeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _OfficeInvadeType_descriptor();
inline const ::std::string& _OfficeInvadeType_Name(_OfficeInvadeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _OfficeInvadeType_descriptor(), value);
}
inline bool _OfficeInvadeType_Parse(
    const ::std::string& name, _OfficeInvadeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_OfficeInvadeType>(
    _OfficeInvadeType_descriptor(), name, value);
}
enum _RefreshDay {
  TODAY = 0,
  TOMORROW = 1
};
bool _RefreshDay_IsValid(int value);
const _RefreshDay _RefreshDay_MIN = TODAY;
const _RefreshDay _RefreshDay_MAX = TOMORROW;
const int _RefreshDay_ARRAYSIZE = _RefreshDay_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RefreshDay_descriptor();
inline const ::std::string& _RefreshDay_Name(_RefreshDay value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RefreshDay_descriptor(), value);
}
inline bool _RefreshDay_Parse(
    const ::std::string& name, _RefreshDay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RefreshDay>(
    _RefreshDay_descriptor(), name, value);
}
enum _PlunderStatus {
  PLUNDER_IDLE = 0,
  PLUNDERING_REALTIME_TASK = 1,
  PLUNDERING_ONLINE_TASK = 2,
  PLUNDERING_ASSIGN_TASK = 3,
  PLUNDER_FINISHED = 4
};
bool _PlunderStatus_IsValid(int value);
const _PlunderStatus _PlunderStatus_MIN = PLUNDER_IDLE;
const _PlunderStatus _PlunderStatus_MAX = PLUNDER_FINISHED;
const int _PlunderStatus_ARRAYSIZE = _PlunderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _PlunderStatus_descriptor();
inline const ::std::string& _PlunderStatus_Name(_PlunderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _PlunderStatus_descriptor(), value);
}
inline bool _PlunderStatus_Parse(
    const ::std::string& name, _PlunderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_PlunderStatus>(
    _PlunderStatus_descriptor(), name, value);
}
enum _PlunderType {
  PLUNDER_REALTIME = 1,
  PLUNDER_ASSIGN = 2
};
bool _PlunderType_IsValid(int value);
const _PlunderType _PlunderType_MIN = PLUNDER_REALTIME;
const _PlunderType _PlunderType_MAX = PLUNDER_ASSIGN;
const int _PlunderType_ARRAYSIZE = _PlunderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _PlunderType_descriptor();
inline const ::std::string& _PlunderType_Name(_PlunderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _PlunderType_descriptor(), value);
}
inline bool _PlunderType_Parse(
    const ::std::string& name, _PlunderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_PlunderType>(
    _PlunderType_descriptor(), name, value);
}
enum _PlunderRevengeType {
  PLUNDER_NORMAL_TYPE = 1,
  PLUNDER_REVENGE_TYPE = 2
};
bool _PlunderRevengeType_IsValid(int value);
const _PlunderRevengeType _PlunderRevengeType_MIN = PLUNDER_NORMAL_TYPE;
const _PlunderRevengeType _PlunderRevengeType_MAX = PLUNDER_REVENGE_TYPE;
const int _PlunderRevengeType_ARRAYSIZE = _PlunderRevengeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _PlunderRevengeType_descriptor();
inline const ::std::string& _PlunderRevengeType_Name(_PlunderRevengeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _PlunderRevengeType_descriptor(), value);
}
inline bool _PlunderRevengeType_Parse(
    const ::std::string& name, _PlunderRevengeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_PlunderRevengeType>(
    _PlunderRevengeType_descriptor(), name, value);
}
enum _PlunderResult {
  PLUNDER_SUCCESS = 1,
  PLUNDER_FAILED = 2,
  PLUNDER_TIMEOUT = 3
};
bool _PlunderResult_IsValid(int value);
const _PlunderResult _PlunderResult_MIN = PLUNDER_SUCCESS;
const _PlunderResult _PlunderResult_MAX = PLUNDER_TIMEOUT;
const int _PlunderResult_ARRAYSIZE = _PlunderResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* _PlunderResult_descriptor();
inline const ::std::string& _PlunderResult_Name(_PlunderResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    _PlunderResult_descriptor(), value);
}
inline bool _PlunderResult_Parse(
    const ::std::string& name, _PlunderResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_PlunderResult>(
    _PlunderResult_descriptor(), name, value);
}
enum _PlunderRecordStatus {
  PLUNDER_RECORD_IDLE = 1,
  PLUNDER_RECORD_REVENGING = 2,
  PLUNDER_RECORD_REVENGE_SUCCESS = 3,
  PLUNDER_RECORD_REVENGE_FAILED = 4
};
bool _PlunderRecordStatus_IsValid(int value);
const _PlunderRecordStatus _PlunderRecordStatus_MIN = PLUNDER_RECORD_IDLE;
const _PlunderRecordStatus _PlunderRecordStatus_MAX = PLUNDER_RECORD_REVENGE_FAILED;
const int _PlunderRecordStatus_ARRAYSIZE = _PlunderRecordStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _PlunderRecordStatus_descriptor();
inline const ::std::string& _PlunderRecordStatus_Name(_PlunderRecordStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _PlunderRecordStatus_descriptor(), value);
}
inline bool _PlunderRecordStatus_Parse(
    const ::std::string& name, _PlunderRecordStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_PlunderRecordStatus>(
    _PlunderRecordStatus_descriptor(), name, value);
}
enum _TaskDenyResult {
  NOTHING = 0,
  DOUBLE_REWARD = 1,
  TRIPLE_REWARD = 2,
  PUNISH = 3
};
bool _TaskDenyResult_IsValid(int value);
const _TaskDenyResult _TaskDenyResult_MIN = NOTHING;
const _TaskDenyResult _TaskDenyResult_MAX = PUNISH;
const int _TaskDenyResult_ARRAYSIZE = _TaskDenyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* _TaskDenyResult_descriptor();
inline const ::std::string& _TaskDenyResult_Name(_TaskDenyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    _TaskDenyResult_descriptor(), value);
}
inline bool _TaskDenyResult_Parse(
    const ::std::string& name, _TaskDenyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_TaskDenyResult>(
    _TaskDenyResult_descriptor(), name, value);
}
enum _TradeRoadBranchLevel {
  TRADE_ROAD_BRANCH_LOW = 0,
  TRADE_ROAD_BRANCH_HIGH = 1
};
bool _TradeRoadBranchLevel_IsValid(int value);
const _TradeRoadBranchLevel _TradeRoadBranchLevel_MIN = TRADE_ROAD_BRANCH_LOW;
const _TradeRoadBranchLevel _TradeRoadBranchLevel_MAX = TRADE_ROAD_BRANCH_HIGH;
const int _TradeRoadBranchLevel_ARRAYSIZE = _TradeRoadBranchLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* _TradeRoadBranchLevel_descriptor();
inline const ::std::string& _TradeRoadBranchLevel_Name(_TradeRoadBranchLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    _TradeRoadBranchLevel_descriptor(), value);
}
inline bool _TradeRoadBranchLevel_Parse(
    const ::std::string& name, _TradeRoadBranchLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_TradeRoadBranchLevel>(
    _TradeRoadBranchLevel_descriptor(), name, value);
}
enum _TradeRoadBoxChestType {
  TRADE_ROAD_BOX_CHEST_LOW = 1,
  TRADE_ROAD_BOX_CHEST_HIGH = 2
};
bool _TradeRoadBoxChestType_IsValid(int value);
const _TradeRoadBoxChestType _TradeRoadBoxChestType_MIN = TRADE_ROAD_BOX_CHEST_LOW;
const _TradeRoadBoxChestType _TradeRoadBoxChestType_MAX = TRADE_ROAD_BOX_CHEST_HIGH;
const int _TradeRoadBoxChestType_ARRAYSIZE = _TradeRoadBoxChestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _TradeRoadBoxChestType_descriptor();
inline const ::std::string& _TradeRoadBoxChestType_Name(_TradeRoadBoxChestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _TradeRoadBoxChestType_descriptor(), value);
}
inline bool _TradeRoadBoxChestType_Parse(
    const ::std::string& name, _TradeRoadBoxChestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_TradeRoadBoxChestType>(
    _TradeRoadBoxChestType_descriptor(), name, value);
}
enum _TradeRoadBranchStatus {
  TRADE_ROAD_BRANCH_UNOPEN = 0,
  TRADE_ROAD_BRANCH_LOCK = 1,
  TRADE_ROAD_BRANCH_OPEN = 2,
  TRADE_ROAD_BRANCH_OPERATING = 3,
  TRADE_ROAD_BRANCH_FETCHED = 4,
  TRADE_ROAD_BRANCH_BOX_OPENED = 5
};
bool _TradeRoadBranchStatus_IsValid(int value);
const _TradeRoadBranchStatus _TradeRoadBranchStatus_MIN = TRADE_ROAD_BRANCH_UNOPEN;
const _TradeRoadBranchStatus _TradeRoadBranchStatus_MAX = TRADE_ROAD_BRANCH_BOX_OPENED;
const int _TradeRoadBranchStatus_ARRAYSIZE = _TradeRoadBranchStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _TradeRoadBranchStatus_descriptor();
inline const ::std::string& _TradeRoadBranchStatus_Name(_TradeRoadBranchStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _TradeRoadBranchStatus_descriptor(), value);
}
inline bool _TradeRoadBranchStatus_Parse(
    const ::std::string& name, _TradeRoadBranchStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_TradeRoadBranchStatus>(
    _TradeRoadBranchStatus_descriptor(), name, value);
}
enum _TradeRoadCityStatus {
  TRADE_ROAD_CITY_UNOPEN = 0,
  TRADE_ROAD_CITY_LOCK = 1,
  TRADE_ROAD_CITY_UNLOCK = 2,
  TRADE_ROAD_CITY_DONE = 3
};
bool _TradeRoadCityStatus_IsValid(int value);
const _TradeRoadCityStatus _TradeRoadCityStatus_MIN = TRADE_ROAD_CITY_UNOPEN;
const _TradeRoadCityStatus _TradeRoadCityStatus_MAX = TRADE_ROAD_CITY_DONE;
const int _TradeRoadCityStatus_ARRAYSIZE = _TradeRoadCityStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _TradeRoadCityStatus_descriptor();
inline const ::std::string& _TradeRoadCityStatus_Name(_TradeRoadCityStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _TradeRoadCityStatus_descriptor(), value);
}
inline bool _TradeRoadCityStatus_Parse(
    const ::std::string& name, _TradeRoadCityStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_TradeRoadCityStatus>(
    _TradeRoadCityStatus_descriptor(), name, value);
}
enum _StorySeasonRewardType {
  STORY_REWARD_YEAR = 1,
  STORY_REWARD_SEASON = 2
};
bool _StorySeasonRewardType_IsValid(int value);
const _StorySeasonRewardType _StorySeasonRewardType_MIN = STORY_REWARD_YEAR;
const _StorySeasonRewardType _StorySeasonRewardType_MAX = STORY_REWARD_SEASON;
const int _StorySeasonRewardType_ARRAYSIZE = _StorySeasonRewardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _StorySeasonRewardType_descriptor();
inline const ::std::string& _StorySeasonRewardType_Name(_StorySeasonRewardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _StorySeasonRewardType_descriptor(), value);
}
inline bool _StorySeasonRewardType_Parse(
    const ::std::string& name, _StorySeasonRewardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_StorySeasonRewardType>(
    _StorySeasonRewardType_descriptor(), name, value);
}
enum _ExpressmanStatus {
  REST = 0,
  WORKING = 1
};
bool _ExpressmanStatus_IsValid(int value);
const _ExpressmanStatus _ExpressmanStatus_MIN = REST;
const _ExpressmanStatus _ExpressmanStatus_MAX = WORKING;
const int _ExpressmanStatus_ARRAYSIZE = _ExpressmanStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ExpressmanStatus_descriptor();
inline const ::std::string& _ExpressmanStatus_Name(_ExpressmanStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ExpressmanStatus_descriptor(), value);
}
inline bool _ExpressmanStatus_Parse(
    const ::std::string& name, _ExpressmanStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ExpressmanStatus>(
    _ExpressmanStatus_descriptor(), name, value);
}
enum _ExpressmanOrigin {
  EXPRESSMAN_ORIGIN_SHOP = 1,
  EXPRESSMAN_ORIGIN_ORDER_LIST = 2,
  EXPRESSMAN_ORIGIN_RECHARGE = 3
};
bool _ExpressmanOrigin_IsValid(int value);
const _ExpressmanOrigin _ExpressmanOrigin_MIN = EXPRESSMAN_ORIGIN_SHOP;
const _ExpressmanOrigin _ExpressmanOrigin_MAX = EXPRESSMAN_ORIGIN_RECHARGE;
const int _ExpressmanOrigin_ARRAYSIZE = _ExpressmanOrigin_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ExpressmanOrigin_descriptor();
inline const ::std::string& _ExpressmanOrigin_Name(_ExpressmanOrigin value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ExpressmanOrigin_descriptor(), value);
}
inline bool _ExpressmanOrigin_Parse(
    const ::std::string& name, _ExpressmanOrigin* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ExpressmanOrigin>(
    _ExpressmanOrigin_descriptor(), name, value);
}
enum _VIPEffectId {
  MAX_BUY_FLAG_COUNT = 1,
  MAX_BUY_COIN_COUNT = 2,
  MAX_BUY_EXPRESSMAN_COIN_COUNT = 3,
  MAX_BUY_PLUNDER_COUNT = 4,
  MAX_BUY_ARENA_COUNT = 5,
  MAX_DAILY_TASK_REFRESH_COUNT = 6,
  MAX_TASK_DENY_COUNT = 7,
  FLAG_PRODUCE_EVERYTIME = 8,
  MAX_SPONSOR_COUNT_MEANWHILE = 9,
  EXTRA_SPONSOR_EXP_PERCENT = 10,
  OPEN_GOLD_SHOP = 11,
  OPEN_ACTIVITY_SWEEP = 12,
  DOUBLE_KITCHEN_PRODUCE = 13,
  MAX_PLUNDER_COUNT_MEANWHILE = 14,
  OPEN_DENY_TASK_TRIPLE_REWARD = 15,
  OPEN_ULTIMATE_TOUGHEN = 16,
  MAX_BUY_ACTIVITY_COUNT = 17,
  MAX_BUY_OFFICE_INVADE_COUNT = 18,
  DAILY_WORSHIP_NUM_LIMIT = 19,
  IS_SENIOR_WORSHIP_AVAILABLE = 20,
  MAX_BUY_CHALLENGE_STAGE_COUNT = 21,
  MAX_BUY_ELITE_STAGE_COUNT = 22,
  IS_ONE_CLICK_EQUIP_UPGRADE_AVAILABLE = 23,
  DAILY_TRADE_ROAD_RESET_COUNT = 24,
  IS_RAFFLE_SOUL_BOX_OPEN = 25,
  TASK_SEARCH_IN_PERSON_NUM_UP_LIMIT = 26,
  MAX_BUY_COUNTRY_BATTLE_COUNT = 27
};
bool _VIPEffectId_IsValid(int value);
const _VIPEffectId _VIPEffectId_MIN = MAX_BUY_FLAG_COUNT;
const _VIPEffectId _VIPEffectId_MAX = MAX_BUY_COUNTRY_BATTLE_COUNT;
const int _VIPEffectId_ARRAYSIZE = _VIPEffectId_MAX + 1;

const ::google::protobuf::EnumDescriptor* _VIPEffectId_descriptor();
inline const ::std::string& _VIPEffectId_Name(_VIPEffectId value) {
  return ::google::protobuf::internal::NameOfEnum(
    _VIPEffectId_descriptor(), value);
}
inline bool _VIPEffectId_Parse(
    const ::std::string& name, _VIPEffectId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_VIPEffectId>(
    _VIPEffectId_descriptor(), name, value);
}
enum _OperatingAchievementType {
  OPERATING_ACHIEVEMENT_TYPE_MIN = 0,
  OPERATING_ACHIEVEMENT_TYPE_OFFICE_LEVEL = 1,
  OPERATING_ACHIEVEMENT_TYPE_OFFICE_POWER = 2,
  OPERATING_ACHIEVEMENT_TYPE_EXPRESSMAN_TOTAL_GRADE = 3,
  OPERATING_ACHIEVEMENT_TYPE_CARRIER_QUALITY = 4,
  OPERATING_ACHIEVEMENT_TYPE_ELITE_STORY_STAR = 10,
  OPERATING_ACHIEVEMENT_TYPE_CUMULATIVE_RECHARGE = 11,
  OPERATING_ACHIEVEMENT_TYPE_ASSIGN_TASK = 12,
  OPERATING_ACHIEVEMENT_TYPE_EXPRESSMAN_COIN_RAFFLE = 13,
  OPERATING_ACHIEVEMENT_TYPE_GOLD_RAFFLE = 14,
  OPERATING_ACHIEVEMENT_TYPE_MAX = 15
};
bool _OperatingAchievementType_IsValid(int value);
const _OperatingAchievementType _OperatingAchievementType_MIN = OPERATING_ACHIEVEMENT_TYPE_MIN;
const _OperatingAchievementType _OperatingAchievementType_MAX = OPERATING_ACHIEVEMENT_TYPE_MAX;
const int _OperatingAchievementType_ARRAYSIZE = _OperatingAchievementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _OperatingAchievementType_descriptor();
inline const ::std::string& _OperatingAchievementType_Name(_OperatingAchievementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _OperatingAchievementType_descriptor(), value);
}
inline bool _OperatingAchievementType_Parse(
    const ::std::string& name, _OperatingAchievementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_OperatingAchievementType>(
    _OperatingAchievementType_descriptor(), name, value);
}
enum _CarnivalTaskType {
  CARNIVAL_TASK_TYPE_MIN = 0,
  CARNIVAL_TASK_TYPE_OFFICE_LEVEL = 1,
  CARNIVAL_TASK_TYPE_OFFICE_POWER = 2,
  CARNIVAL_TASK_TYPE_RECHARGE = 3,
  CARNIVAL_TASK_TYPE_GOLD_COST = 4,
  CARNIVAL_TASK_TYPE_COIN_COST = 5,
  CARNIVAL_TASK_TYPE_EXPRESSMAN_COIN_COST = 6,
  CARNIVAL_TASK_TYPE_FLAG_COST = 7,
  CARNIVAL_TASK_TYPE_BUY_FLAG = 8,
  CARNIVAL_TASK_TYPE_COLlECT_FLAG = 9,
  CARNIVAL_TASK_TYPE_BUY_COIN = 10,
  CARNIVAL_TASK_TYPE_EXPRESSMAN_COIN_RAFFER = 11,
  CARNIVAL_TASK_TYPE_GOLD_RAFFLE = 12,
  CARNIVAL_TASK_TYPE_FINISH_DAILY_TASK = 13,
  CARNIVAL_TASK_TYPE_AREAN_ESCORT = 14,
  CARNIVAL_TASK_TYPE_PLUNDER_ESCORT = 15,
  CARNIVAL_TASK_TYPE_ACTIVITY_ESCORT = 16,
  CARNIVAL_TASK_TYPE_OFFICE_INVADE_ESCORT = 17,
  CARNIVAL_TASK_TYPE_OFFICE_INVADE_LEVEL = 18,
  CARNIVAL_TASK_TYPE_TRADE_ROAD_ESCORT = 19,
  CARNIVAL_TASK_TYPE_UNION_TRAP_ESCORT = 20,
  CARNIVAL_TASK_TYPE_CARRIER_PART_LEVEL = 21,
  CARNIVAL_TASK_TYPE_WORLD_BOSS_ESCORT = 22,
  CARNIVAL_TASK_TYPE_TASK_FINISH = 23,
  CARNIVAL_TASK_TYPE_TASK_ESCORT = 24,
  CARNIVAL_TASK_TYPE_TASK_ASSIGN = 25,
  CARNIVAL_TASK_TYPE_ELITE_STORY_ESCORT = 26,
  CARNIVAL_TASK_TYPE_ELITE_STORY_STARS = 27,
  CARNIVAL_TASK_TYPE_SPECIAL_TASK_FINISH = 28,
  CARNIVAL_TASK_TYPE_CONSIGNER_STAR = 29,
  CARNIVAL_TASK_TYPE_EXPRESSMAN_COUNT = 30,
  CARNIVAL_TASK_TYPE_SKILL_UP = 31,
  CARNIVAL_TASK_TYPE_EQUIPMENT_UP = 32,
  CARNIVAL_TASK_TYPE_MORAL_UP = 33,
  CARNIVAL_TASK_TYPE_MAX = 34
};
bool _CarnivalTaskType_IsValid(int value);
const _CarnivalTaskType _CarnivalTaskType_MIN = CARNIVAL_TASK_TYPE_MIN;
const _CarnivalTaskType _CarnivalTaskType_MAX = CARNIVAL_TASK_TYPE_MAX;
const int _CarnivalTaskType_ARRAYSIZE = _CarnivalTaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CarnivalTaskType_descriptor();
inline const ::std::string& _CarnivalTaskType_Name(_CarnivalTaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CarnivalTaskType_descriptor(), value);
}
inline bool _CarnivalTaskType_Parse(
    const ::std::string& name, _CarnivalTaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CarnivalTaskType>(
    _CarnivalTaskType_descriptor(), name, value);
}
enum _CarnivalCalcType {
  CARNIVAL_CALC_CURRENT_VALUE = 0,
  CARNIVAL_CALC_ACCUMULATION = 1
};
bool _CarnivalCalcType_IsValid(int value);
const _CarnivalCalcType _CarnivalCalcType_MIN = CARNIVAL_CALC_CURRENT_VALUE;
const _CarnivalCalcType _CarnivalCalcType_MAX = CARNIVAL_CALC_ACCUMULATION;
const int _CarnivalCalcType_ARRAYSIZE = _CarnivalCalcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CarnivalCalcType_descriptor();
inline const ::std::string& _CarnivalCalcType_Name(_CarnivalCalcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CarnivalCalcType_descriptor(), value);
}
inline bool _CarnivalCalcType_Parse(
    const ::std::string& name, _CarnivalCalcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CarnivalCalcType>(
    _CarnivalCalcType_descriptor(), name, value);
}
enum _RankingType {
  RANKING_TYPE_ARENA_LAST_SEASON = 1,
  RANKING_TYPE_ARENA_CURR_SEASON = 2,
  RANKING_TYPE_OFFICE_POWER = 3,
  RANKING_TYPE_EXPRESSMAN_POWER = 4,
  RANKING_TYPE_CARRIER_POWER = 5,
  RANKING_TYPE_UNION = 6,
  RANKING_TYPE_WORLD_BOSS = 7
};
bool _RankingType_IsValid(int value);
const _RankingType _RankingType_MIN = RANKING_TYPE_ARENA_LAST_SEASON;
const _RankingType _RankingType_MAX = RANKING_TYPE_WORLD_BOSS;
const int _RankingType_ARRAYSIZE = _RankingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RankingType_descriptor();
inline const ::std::string& _RankingType_Name(_RankingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RankingType_descriptor(), value);
}
inline bool _RankingType_Parse(
    const ::std::string& name, _RankingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RankingType>(
    _RankingType_descriptor(), name, value);
}
enum _RankingExtraInfoType {
  RANKING_EXTRA_INFO_TYPE_ARENA_TEAM = 1,
  RANKING_EXTRA_INFO_TYPE_ESCORT_TEAM = 2,
  RANKING_EXTRA_INFO_TYPE_WORLDBOSS_TEAM = 3
};
bool _RankingExtraInfoType_IsValid(int value);
const _RankingExtraInfoType _RankingExtraInfoType_MIN = RANKING_EXTRA_INFO_TYPE_ARENA_TEAM;
const _RankingExtraInfoType _RankingExtraInfoType_MAX = RANKING_EXTRA_INFO_TYPE_WORLDBOSS_TEAM;
const int _RankingExtraInfoType_ARRAYSIZE = _RankingExtraInfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RankingExtraInfoType_descriptor();
inline const ::std::string& _RankingExtraInfoType_Name(_RankingExtraInfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RankingExtraInfoType_descriptor(), value);
}
inline bool _RankingExtraInfoType_Parse(
    const ::std::string& name, _RankingExtraInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RankingExtraInfoType>(
    _RankingExtraInfoType_descriptor(), name, value);
}
enum _ChatRoomType {
  WORLD_ROOM = 1,
  UNION_ROOM = 2
};
bool _ChatRoomType_IsValid(int value);
const _ChatRoomType _ChatRoomType_MIN = WORLD_ROOM;
const _ChatRoomType _ChatRoomType_MAX = UNION_ROOM;
const int _ChatRoomType_ARRAYSIZE = _ChatRoomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ChatRoomType_descriptor();
inline const ::std::string& _ChatRoomType_Name(_ChatRoomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ChatRoomType_descriptor(), value);
}
inline bool _ChatRoomType_Parse(
    const ::std::string& name, _ChatRoomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ChatRoomType>(
    _ChatRoomType_descriptor(), name, value);
}
enum _ChatEventType {
  CHAT_EVENT_MIN = 0,
  CHAT_EVENT_WORLD_BOOS_APPEAR = 1,
  CHAT_EVENT_WORLD_BOOS_FLEE = 2,
  CHAT_EVENT_WORLD_BOOS_KILLED = 3,
  CHAT_EVENT_BUY_TRANSFORMERS = 4,
  CHAT_EVENT_CARRIER_UP_MAX = 5,
  CHAT_EVENT_EXPRESSMAN_UP_MAX = 6,
  CHAT_EVENT_EQUIMENT_UP_MAX = 7,
  CHAT_EVENT_ARENA_UP_LEGEND = 8,
  CHAT_EVENT_BUY_APPLE = 9,
  CHAT_EVENT_BUY_ALASD = 10,
  CHAT_EVENT_MAX = 11
};
bool _ChatEventType_IsValid(int value);
const _ChatEventType _ChatEventType_MIN = CHAT_EVENT_MIN;
const _ChatEventType _ChatEventType_MAX = CHAT_EVENT_MAX;
const int _ChatEventType_ARRAYSIZE = _ChatEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ChatEventType_descriptor();
inline const ::std::string& _ChatEventType_Name(_ChatEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ChatEventType_descriptor(), value);
}
inline bool _ChatEventType_Parse(
    const ::std::string& name, _ChatEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ChatEventType>(
    _ChatEventType_descriptor(), name, value);
}
enum _RandomShopRefreshStatus {
  RANDOM_SHOP_REFRESH_INIT = 1,
  RANDOM_SHOP_REFRESH_OVERDUE = 2,
  RANDOM_SHOP_REFRESH_OPENING = 3,
  RANDOM_SHOP_REFRESH_CLOSED = 4
};
bool _RandomShopRefreshStatus_IsValid(int value);
const _RandomShopRefreshStatus _RandomShopRefreshStatus_MIN = RANDOM_SHOP_REFRESH_INIT;
const _RandomShopRefreshStatus _RandomShopRefreshStatus_MAX = RANDOM_SHOP_REFRESH_CLOSED;
const int _RandomShopRefreshStatus_ARRAYSIZE = _RandomShopRefreshStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _RandomShopRefreshStatus_descriptor();
inline const ::std::string& _RandomShopRefreshStatus_Name(_RandomShopRefreshStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _RandomShopRefreshStatus_descriptor(), value);
}
inline bool _RandomShopRefreshStatus_Parse(
    const ::std::string& name, _RandomShopRefreshStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_RandomShopRefreshStatus>(
    _RandomShopRefreshStatus_descriptor(), name, value);
}
enum _BadgeAchievementType {
  BADGE_ACHIEVEMENT_TYPE_VIP = 1,
  BADGE_ACHIEVEMENT_TYPE_ARENA = 2,
  BADGE_ACHIEVEMENT_TYPE_POWER = 3
};
bool _BadgeAchievementType_IsValid(int value);
const _BadgeAchievementType _BadgeAchievementType_MIN = BADGE_ACHIEVEMENT_TYPE_VIP;
const _BadgeAchievementType _BadgeAchievementType_MAX = BADGE_ACHIEVEMENT_TYPE_POWER;
const int _BadgeAchievementType_ARRAYSIZE = _BadgeAchievementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _BadgeAchievementType_descriptor();
inline const ::std::string& _BadgeAchievementType_Name(_BadgeAchievementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _BadgeAchievementType_descriptor(), value);
}
inline bool _BadgeAchievementType_Parse(
    const ::std::string& name, _BadgeAchievementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_BadgeAchievementType>(
    _BadgeAchievementType_descriptor(), name, value);
}
enum _WorldBossStatus {
  WORLD_BOSS_IDLE = 1,
  WORLD_BOSS_OPEN = 2,
  WORLD_BOSS_CLOSED = 3,
  WORLD_BOSS_KILLED = 4
};
bool _WorldBossStatus_IsValid(int value);
const _WorldBossStatus _WorldBossStatus_MIN = WORLD_BOSS_IDLE;
const _WorldBossStatus _WorldBossStatus_MAX = WORLD_BOSS_KILLED;
const int _WorldBossStatus_ARRAYSIZE = _WorldBossStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _WorldBossStatus_descriptor();
inline const ::std::string& _WorldBossStatus_Name(_WorldBossStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _WorldBossStatus_descriptor(), value);
}
inline bool _WorldBossStatus_Parse(
    const ::std::string& name, _WorldBossStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_WorldBossStatus>(
    _WorldBossStatus_descriptor(), name, value);
}
enum _CountryBattleCommerceStatus {
  COUNTRY_BATTLE_COMMERCE_STATUS_IDLE = 1,
  COUNTRY_BATTLE_COMMERCE_STATUS_COMBATING = 2,
  COUNTRY_BATTLE_COMMERCE_STATUS_PROTECTED = 3
};
bool _CountryBattleCommerceStatus_IsValid(int value);
const _CountryBattleCommerceStatus _CountryBattleCommerceStatus_MIN = COUNTRY_BATTLE_COMMERCE_STATUS_IDLE;
const _CountryBattleCommerceStatus _CountryBattleCommerceStatus_MAX = COUNTRY_BATTLE_COMMERCE_STATUS_PROTECTED;
const int _CountryBattleCommerceStatus_ARRAYSIZE = _CountryBattleCommerceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CountryBattleCommerceStatus_descriptor();
inline const ::std::string& _CountryBattleCommerceStatus_Name(_CountryBattleCommerceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CountryBattleCommerceStatus_descriptor(), value);
}
inline bool _CountryBattleCommerceStatus_Parse(
    const ::std::string& name, _CountryBattleCommerceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CountryBattleCommerceStatus>(
    _CountryBattleCommerceStatus_descriptor(), name, value);
}
enum _MaterialRecycleBoxChestType {
  MATERIALS_RECYCLE_BOX_CHEST_LOW = 1,
  MATERIALS_RECYCLE_BOX_CHEST_MID = 2,
  MATERIALS_RECYCLE_BOX_CHEST_HIGH = 3
};
bool _MaterialRecycleBoxChestType_IsValid(int value);
const _MaterialRecycleBoxChestType _MaterialRecycleBoxChestType_MIN = MATERIALS_RECYCLE_BOX_CHEST_LOW;
const _MaterialRecycleBoxChestType _MaterialRecycleBoxChestType_MAX = MATERIALS_RECYCLE_BOX_CHEST_HIGH;
const int _MaterialRecycleBoxChestType_ARRAYSIZE = _MaterialRecycleBoxChestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _MaterialRecycleBoxChestType_descriptor();
inline const ::std::string& _MaterialRecycleBoxChestType_Name(_MaterialRecycleBoxChestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _MaterialRecycleBoxChestType_descriptor(), value);
}
inline bool _MaterialRecycleBoxChestType_Parse(
    const ::std::string& name, _MaterialRecycleBoxChestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_MaterialRecycleBoxChestType>(
    _MaterialRecycleBoxChestType_descriptor(), name, value);
}
enum _CountryBattleStartError {
  COUNTRY_BATTLE_START_ERROR_OWNING = 1,
  COUNTRY_BATTLE_START_ERROR_LACK_ATTACK_COUNT = 2,
  COUNTRY_BATTLE_START_ERROR_COMBATING = 3,
  COUNTRY_BATTLE_START_ERROR_PROTECTED = 4,
  COUNTRY_BATTLE_START_ERROR_INVALID_COMMERCE = 5
};
bool _CountryBattleStartError_IsValid(int value);
const _CountryBattleStartError _CountryBattleStartError_MIN = COUNTRY_BATTLE_START_ERROR_OWNING;
const _CountryBattleStartError _CountryBattleStartError_MAX = COUNTRY_BATTLE_START_ERROR_INVALID_COMMERCE;
const int _CountryBattleStartError_ARRAYSIZE = _CountryBattleStartError_MAX + 1;

const ::google::protobuf::EnumDescriptor* _CountryBattleStartError_descriptor();
inline const ::std::string& _CountryBattleStartError_Name(_CountryBattleStartError value) {
  return ::google::protobuf::internal::NameOfEnum(
    _CountryBattleStartError_descriptor(), value);
}
inline bool _CountryBattleStartError_Parse(
    const ::std::string& name, _CountryBattleStartError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_CountryBattleStartError>(
    _CountryBattleStartError_descriptor(), name, value);
}
enum _FriendSearchType {
  FRIEND_SEARCH_PRECISE = 1,
  FRIEND_SEARCH_RECOMEND = 2
};
bool _FriendSearchType_IsValid(int value);
const _FriendSearchType _FriendSearchType_MIN = FRIEND_SEARCH_PRECISE;
const _FriendSearchType _FriendSearchType_MAX = FRIEND_SEARCH_RECOMEND;
const int _FriendSearchType_ARRAYSIZE = _FriendSearchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _FriendSearchType_descriptor();
inline const ::std::string& _FriendSearchType_Name(_FriendSearchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _FriendSearchType_descriptor(), value);
}
inline bool _FriendSearchType_Parse(
    const ::std::string& name, _FriendSearchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_FriendSearchType>(
    _FriendSearchType_descriptor(), name, value);
}
enum _FriendOptStatus {
  FRIEND_OPT_SUCCESS = 1,
  FRIEND_OPT_NOT_EXIST = 2,
  FRIEND_OPT_FAILED = 3,
  FRIEND_OPT_FULL = 4
};
bool _FriendOptStatus_IsValid(int value);
const _FriendOptStatus _FriendOptStatus_MIN = FRIEND_OPT_SUCCESS;
const _FriendOptStatus _FriendOptStatus_MAX = FRIEND_OPT_FULL;
const int _FriendOptStatus_ARRAYSIZE = _FriendOptStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* _FriendOptStatus_descriptor();
inline const ::std::string& _FriendOptStatus_Name(_FriendOptStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    _FriendOptStatus_descriptor(), value);
}
inline bool _FriendOptStatus_Parse(
    const ::std::string& name, _FriendOptStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_FriendOptStatus>(
    _FriendOptStatus_descriptor(), name, value);
}
enum _ErrorType {
  LACK_COIN = 1,
  LACK_GOLD = 2,
  LACK_FLAG = 3,
  LACK_TICKET = 4,
  LACK_EXPRESSMAN_COIN = 5,
  LACK_ARENA_COIN = 6,
  LACK_SKILL_BOOK = 7,
  LACK_PLUNDER_COIN = 8,
  LACK_TRADE_ROAD_COIN = 9,
  LACK_GOODS = 10,
  OVERFLOW_GOODS = 11,
  LACK_UNION_COIN = 12,
  LACK_MATERIAL_SOURCE = 13
};
bool _ErrorType_IsValid(int value);
const _ErrorType _ErrorType_MIN = LACK_COIN;
const _ErrorType _ErrorType_MAX = LACK_MATERIAL_SOURCE;
const int _ErrorType_ARRAYSIZE = _ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* _ErrorType_descriptor();
inline const ::std::string& _ErrorType_Name(_ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    _ErrorType_descriptor(), value);
}
inline bool _ErrorType_Parse(
    const ::std::string& name, _ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<_ErrorType>(
    _ErrorType_descriptor(), name, value);
}
enum MessageType {
  LOGIN = 1,
  CREATE_CHARACTER = 2,
  LOGIN_STATUS = 3,
  OFFICE_RENAME = 4,
  OFFICE_LEVEL_REWARD = 5,
  LOGOUT = 6,
  GM_CHANGED_INFO = 7,
  TASK_LIST = 10,
  TASK_DENY = 11,
  TASK_READ = 12,
  TASK_ADD = 13,
  TASK_ASSIGN = 14,
  TASK_ASSIGN_RECEIVE_REWARD = 15,
  CONSIGNER_LIST = 16,
  CONSIGNER_RECEIVE_REWARD = 17,
  USE_GOODS = 30,
  SELL_GOODS = 31,
  COMPOSITE_GOODS = 32,
  PURCHASE_GOODS = 33,
  USE_BUNDLE_FLAG = 34,
  USE_BOX = 35,
  USE_WAIST_TAG = 36,
  RECRUIT = 50,
  RAFFLE_INFO = 51,
  RAFFLE = 52,
  SOUL_RAFFLE = 53,
  LEVELUP_SKILL = 70,
  WORKING_EXPRESSMEN = 71,
  LEVELUP_EQUIPMENT = 72,
  QUALITYUP_EQUIPMENT = 73,
  BUY_EXPRESSMAN = 74,
  UNLOCK_EQUIPMENT = 75,
  RECRUIT_NEW_EXPRESSMAN = 76,
  MAJORGRADEUP_EXPRESSMAN = 77,
  LEVELUP_MORAL = 78,
  QUALITYUP_MORAL = 79,
  MORAL_LEVEL_INFO = 80,
  QUERY_TEAM_INFO = 81,
  ESCORT_START = 90,
  ESCORT_STAGE_START = 91,
  ESCORT_COMBAT_START = 92,
  ESCORT_COMBAT_END = 93,
  ESCORT_STAGE_END = 94,
  ESCORT_END = 95,
  ESCORT_SYNC = 100,
  DAILY_TASK_LIST = 110,
  DAILY_TASK_REWARD = 112,
  KITCHEN_LIST = 120,
  KITCHEN_COLLECT_ALL_FOOD = 121,
  DEPLOY_CARRIER = 130,
  BUY_CARRIER = 131,
  STRENGTHEN_CARRIER = 132,
  REPAIR_CARRIER = 133,
  CARRIER_EQUIP_PART = 134,
  CARRIER_UN_EQUIP_PART = 135,
  CARRIER_UNLOCK_PART = 136,
  CARRIER_LEVEL_UP_PART = 137,
  CARRIER_GRADE_UP_PART = 138,
  OUTLETS_LIST = 160,
  OUTLETS_BUY = 161,
  OUTLETS_REFRESH = 162,
  PLUNDER_INFO = 170,
  PLUNDER_SEARCH = 171,
  PLUNDER_START = 172,
  PLUNDER_RESULT = 173,
  PLUNDER_RECEIVE_ASSIGN_REWARD = 174,
  PLUNDER_RECORD_INFO = 175,
  PLUNDER_REVENGE = 176,
  PLUNDER_REVENGE_RECEIVE_REWARD = 177,
  PLUNDER_SHOP_INFO = 178,
  PLUNDER_SHOP_BUY = 179,
  PLUNDER_SHOP_REFRESH = 180,
  WORKSHOP_LIST = 210,
  WORKSHOP_COLLECT_ALL = 211,
  ACTIVITY_LIST = 220,
  BUY_ACTIVITY_COUNT = 221,
  ACTIVITY_SYSTEM_SWEEP = 222,
  SET_GUIDE_STEP = 240,
  GUIDE_LIST = 241,
  SPONSOR_LIST = 250,
  SPONSOR_SIGN = 251,
  ARENA_LIST = 260,
  ARENA_FIND_OPPONENT = 262,
  ARENA_ADVANCE = 263,
  ARENA_MATCH_RECORD = 264,
  ARENA_SHOP_INFO = 270,
  ARENA_SHOP_BUY = 271,
  ARENA_SHOP_REFRESH = 272,
  MAIL_LIST = 290,
  MAIL_READ = 291,
  MAIL_ATTACHMENT_RECEIVE = 292,
  MAIL_PUSH = 293,
  GOLD_EXCHANGE_LIST = 300,
  GOLD_EXCHANGE_BUY = 301,
  RECHARGE_INFO = 310,
  VIP_LEVEL_REWARD = 311,
  RECHARGE_ORDER_ID = 312,
  RECHARGE_SUCCESS = 313,
  VIP_REWARD_INFO = 314,
  VIP_COLLECT_REWARD = 315,
  COLLECT_FIRST_RECHARGE_REWARD = 316,
  DAILY_RECHARGE_REWARD_INFO = 317,
  COLLECT_DAILY_RECHARGE_REWARD = 318,
  STORY_SYSTEM_INFO = 320,
  STORY_FINISH_REWARD = 321,
  STORY_SEASON_REWARD = 322,
  STORY_SYSTEM_SWEEP = 323,
  STORY_SYSTEM_RESET_COUNT = 324,
  EXPRESSMEN_RECRUITMENT_INFO = 330,
  BUY_RECRUIT_PERMIT = 331,
  RECRUIT_EXPRESSMAN = 332,
  TOUGHEN_EXPRESSMAN = 333,
  TOUGHEN_EXPRESSMAN_INFO = 334,
  NOTICE_INFO = 340,
  DAILY_SIGN_INFO = 350,
  DAILY_SIGN = 351,
  OPEN_EXPRESS_SIGN_INFO = 352,
  OPEN_EXPRESS_SIGN = 353,
  GOLD_SHOP_INFO = 360,
  GOLD_SHOP_BUY = 361,
  GOLD_SHOP_REFRESH = 362,
  USE_CDKEY = 370,
  TRADE_ROAD_SWEEP = 375,
  TRADE_ROAD_OPEN_BOX = 376,
  TRADE_ROAD_SHOP_INFO = 377,
  TRADE_ROAD_SHOP_BUY = 378,
  TRADE_ROAD_SHOP_REFRESH = 379,
  TRADE_ROAD_LIST = 380,
  TRADE_ROAD_UNLOCK_CITY = 381,
  TRADE_ROAD_OPEN_BRANCH = 382,
  TRADE_ROAD_FETCH_REWARD = 383,
  TRADE_ROAD_REFRESH_PLAYERS = 384,
  TRADE_ROAD_SELECT_PLAYER_EXPRESSMAN = 385,
  TRADE_ROAD_SELECT_OPERATION_EXPRESSMAN = 386,
  TRADE_ROAD_BRANCH_CHECK_OPERATED = 387,
  TRADE_ROAD_RESET = 388,
  TRADE_ROAD_FETCH_ALL_REWARD = 389,
  OFFICE_INVADE_CRAP = 390,
  OFFICE_INVADE_GIFT = 391,
  OFFICE_INVADE_RAND_EVENT = 392,
  OFFICE_INVADE_DICE = 393,
  OFFICE_INVADE_COMBAT = 394,
  OFFICE_INVADE_CHOOSE_ROUTE = 395,
  OFFICE_INVADE_INFO = 396,
  OFFICE_INVADE_DEPLOY = 397,
  OFFICE_INVADE_MAIN_STORAGE = 398,
  OFFICE_INVADE_END = 399,
  OFFICE_INVADE_BEING_ATTACKED = 400,
  OFFICE_INVADE_PRODUCE = 401,
  OFFICE_INVADE_COLLECT = 402,
  OFFICE_INVADE_SEARCH = 403,
  OFFICE_INVADE_ATTACK = 404,
  OFFICE_INVADE_CANCEL_ATTACK = 405,
  OFFICE_INVADE_TRAP = 406,
  OFFICE_INVADE_ATTACK_TIMEOUT = 407,
  OFFICE_INVADE_PRODUCE_UPGRADE = 408,
  OFFICE_INVADE_DEFENSE_RECORD_INFO = 409,
  OFFICE_INVADE_REVENGE_TARGET_INFO = 410,
  OPERATING_ACTIVITY_INFO = 430,
  OPERATING_ACTIVITY_COLLECT = 431,
  UNION_LIST = 440,
  UNION_SEARCH = 441,
  UNION_CREATE = 442,
  UNION_EXIT = 443,
  UNION_CHANGE_ANNOUNCEMENT = 444,
  UNION_CHANGE_NAME = 445,
  UNION_DISSOLUTION = 446,
  UNION_ASSIGN = 447,
  UNION_KICK_OUT_MEMBER = 448,
  UNION_APPLY_JOIN = 449,
  UNION_CANCEL_APPLY_JOIN = 450,
  UNION_DONATE = 451,
  UNION_WORSHIP = 452,
  UNION_COLLECT_WORSHIP_REWARD = 453,
  UNION_UNIONS = 454,
  UNION_REFRESH_MEMBERS = 455,
  UNION_DEAL_APPLY = 456,
  UNION_ERROR = 457,
  UNION_STATUS_DEALT = 458,
  UNION_REFRESH_ABSTRACT = 459,
  UNION_MEMBER_DETAIL = 460,
  UNION_SET_MIN_LEVEL = 461,
  UNION_SET_VERIFICATION = 462,
  UNION_REFRESH_PENDING_MEMBERS = 463,
  UNION_MANAGE_ELDERS = 464,
  UNION_SHOP_INFO = 465,
  UNION_SHOP_BUY = 466,
  UNION_SHOP_REFRESH = 467,
  UNION_COLLECT_ACTIVE_REWARD = 468,
  RANKING_LIST = 480,
  RANKING_EXTRA_INFO = 481,
  GROWTH_FUND_INFO = 490,
  BUY_GROWTH_FUND = 491,
  COLLECT_GROWTH_FUND = 492,
  CHAT_ROOM_INFO = 510,
  UNION_ROOM_CHANGE = 511,
  CHAT_PLAYER_INFO = 512,
  STREET_ENTER = 520,
  STREET_LEAVE = 521,
  STREET_MOVE = 522,
  STREET_ADD = 523,
  STREET_REMOVE = 524,
  STREET_SYNC = 525,
  RANDOM_SHOP_INFO = 550,
  RANDOM_SHOP_OPEN = 551,
  RANDOM_SHOP_CLOSE = 552,
  RANDOM_SHOP_BUY = 553,
  BADGE_INFO = 560,
  BADGE_USE = 561,
  GET_ALL_INVITATION_INFO = 570,
  OBTAIN_INVITING_REWARD = 571,
  OBTAIN_INVITED_REWARD = 572,
  SET_INVITE_KEY = 573,
  GET_ALL_WORLD_BOSS_INFO = 600,
  GET_HARM_RANKING_TO_BOSS = 601,
  REFRESH_WORLD_BOSS_CD = 602,
  WORLD_BOSS_START_BATTLE = 603,
  WORLD_BOSS_END_BATTLE = 604,
  GET_WORLD_BOSS_SCORE_RANKING = 605,
  WORLD_BOSS_START_BATTLE_PRE = 606,
  WORLD_BOSS_NOTIFY_BOSS_STAGE = 607,
  WORLD_BOSS_NOTIFY_BATTLE_STATE = 608,
  CARNIVAL_ACTIVITY_INFO = 620,
  CARNIVAL_ACTIVITY_COLLECT = 621,
  CARNIVAL_ACTIVITY_PROGRESS_COLLECT = 622,
  COUNTRY_BATTLE_INFO = 630,
  COUNTRY_BATTLE_WORLD = 631,
  COUNTRY_BATTLE_PROVINCE = 632,
  COUNTRY_BATTLE_CITY = 633,
  COUNTRY_BATTLE_COMMERCE = 634,
  COUNTRY_BATTLE_REWARD_COLLECT = 635,
  COUNTRY_BATTLE_GIVEUP_COMMERCE = 636,
  COUNTRY_BATTLE_START_ERROR = 637,
  COUNTRY_BATTLE_MY_COMMERCE = 638,
  MATERIALS_RECYCLE_DECOMPOSE_MATERIALS = 660,
  MATERIALS_RECYCLE_OPEN_BOX = 661,
  MATERIALS_RECYCLE_BOX_INFO = 662,
  SOULS_RECYCLE_INFO = 670,
  SOULS_RECYCLE_OPEN_BOX = 671,
  SOUL_SHOP_BUY = 672,
  SOUL_SHOP_REFRESH = 673,
  FRIEND_INFO_LIST = 680,
  FRIEND_SEARCH = 681,
  FRIEND_ADD_FOLLOW = 682,
  FRIEND_CANCLE_FOLLOW = 683,
  FRIEND_ADD_BLACK = 684,
  FRIEND_CANCLE_BLACK = 685,
  FRIEND_DETAIL_INFO = 686,
  WORLD_BOSS_SHOP_INFO = 720,
  WORLD_BOSS_SHOP_BUY = 721,
  REGISTER_AS_CLIENT = 1100,
  REGISTER_AS_SERVER = 1101,
  GATEWAY_KEEPALIVE = 1102,
  PS_PLUNDER_SEARCH = 1120,
  PS_ESCORT_START = 1121,
  PS_ESCORT_END = 1122,
  PS_PLUNDER_START = 1123,
  PS_SEARCH_ASSIGNED_TEAM = 1124,
  GS_PLUNDER_START = 1130,
  GS_PLUNDER_RESULT = 1131,
  GS_PLUNDER_ASSIGN_TASK = 1132,
  GS_PLUNDER_REVENGE = 1133,
  DB_PROTOBUF_REFLECTION = 1200,
  DB_LOGIN = 1201,
  DB_CREATE_CHARACTER = 1202,
  DB_PRELOAD = 1203,
  DB_PRELOAD_FINISHED = 1204,
  DB_GM_COMMAND = 1205,
  DB_DEL_ACCOUNT = 1206,
  DB_RANKING = 1207,
  DB_LOAD_PLAYER = 1208,
  DB_REFLECTION_ACK = 1209,
  DB_UNIONS = 1210,
  GM_COMMAND = 1300,
  PAY_GENERATE_RECHARGE_ORDER = 1310,
  PAY_COMPLETE_RECHARGE_ORDER = 1311,
  GS_IS_INVADE_INFO = 1320,
  GS_IS_INVADE_SEARCH = 1321,
  IS_GS_INVADE_SEARCH = 1322,
  GS_GS_INVADE_SEARCH = 1323,
  GS_GS_INVADE_ATTACK_REQUEST = 1324,
  GS_GS_INVADE_ATTACK_RESPONSE = 1325,
  GS_GS_INVADE_ATTACK_CAPTURE = 1326,
  GS_GS_INVADE_ATTACK_END = 1327,
  GS_GS_REVENGE_SEARCH_REQ = 1328,
  GS_GS_REVENGE_SEARCH_REP = 1329,
  GS_CS_USE_CDKEY = 1330,
  BS_ESCORT_START = 1400,
  BS_ESCORT_END = 1401,
  GC_CREAT_CHAT_ROOM = 1500,
  GC_DESTORY_CHAT_ROOM = 1501,
  GC_SEND_CHAT_ROOM_MESSAGE = 1502,
  CS_COUNTRY_BATTLE_INFO = 1600,
  CS_COUNTRY_BATTLE_WORLD = 1601,
  CS_COUNTRY_BATTLE_PROVINCE = 1602,
  CS_COUNTRY_BATTLE_CITY = 1603,
  CS_COUNTRY_BATTLE_COMMERCE = 1604,
  CS_COUNTRY_BATTLE_REWARD_COLLECT = 1605,
  CS_COUNTRY_BATTLE_GIVEUP_COMMERCE = 1606,
  CS_COUNTRY_BATTLE_PLAYER_INFO = 1609,
  CS_COUNTRY_BATTLE_KICKOUT_INFO = 1610,
  CS_COUNTRY_BATTLE_MY_COMMERCE = 1611,
  CS_ESCORT_START = 1612,
  CS_ESCORT_END = 1613,
  CS_COUNTRY_BATTLE_RECORD_INFO = 1614,
  FS_FRIEND_INFO_SYNC = 1700,
  FS_FRIEND_INFO_LIST = 1701,
  FS_FRIEND_SEARCH = 1702,
  FS_FRIEND_ADD_FOLLOW = 1703,
  FS_FRIEND_CANCLE_FOLLOW = 1704,
  FS_FRIEND_ADD_BLACK = 1705,
  FS_FRIEND_CANCLE_BLACK = 1706,
  FS_FRIEND_DETAIL_INFO = 1707,
  FS_FRIEND_PROBE = 1708
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = LOGIN;
const MessageType MessageType_MAX = FS_FRIEND_PROBE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lm::_AssetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_AssetType>() {
  return ::lm::_AssetType_descriptor();
}
template <> struct is_proto_enum< ::lm::_AssetSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_AssetSource>() {
  return ::lm::_AssetSource_descriptor();
}
template <> struct is_proto_enum< ::lm::_RobotType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RobotType>() {
  return ::lm::_RobotType_descriptor();
}
template <> struct is_proto_enum< ::lm::_SystemId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_SystemId>() {
  return ::lm::_SystemId_descriptor();
}
template <> struct is_proto_enum< ::lm::_AdvanceMatchResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_AdvanceMatchResult>() {
  return ::lm::_AdvanceMatchResult_descriptor();
}
template <> struct is_proto_enum< ::lm::_ArenaSeasonIndex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ArenaSeasonIndex>() {
  return ::lm::_ArenaSeasonIndex_descriptor();
}
template <> struct is_proto_enum< ::lm::_ArenaOpponentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ArenaOpponentType>() {
  return ::lm::_ArenaOpponentType_descriptor();
}
template <> struct is_proto_enum< ::lm::_CarrierUp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CarrierUp>() {
  return ::lm::_CarrierUp_descriptor();
}
template <> struct is_proto_enum< ::lm::_CDKeyError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CDKeyError>() {
  return ::lm::_CDKeyError_descriptor();
}
template <> struct is_proto_enum< ::lm::_DailyTaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_DailyTaskType>() {
  return ::lm::_DailyTaskType_descriptor();
}
template <> struct is_proto_enum< ::lm::_EscortType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_EscortType>() {
  return ::lm::_EscortType_descriptor();
}
template <> struct is_proto_enum< ::lm::_EscortEndStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_EscortEndStatus>() {
  return ::lm::_EscortEndStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionJoinedStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionJoinedStatus>() {
  return ::lm::_UnionJoinedStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionMemberType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionMemberType>() {
  return ::lm::_UnionMemberType_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionMemberOptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionMemberOptType>() {
  return ::lm::_UnionMemberOptType_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionErrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionErrorType>() {
  return ::lm::_UnionErrorType_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionWorshipType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionWorshipType>() {
  return ::lm::_UnionWorshipType_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionApplyJoinStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionApplyJoinStatus>() {
  return ::lm::_UnionApplyJoinStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionAssignResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionAssignResult>() {
  return ::lm::_UnionAssignResult_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionManageEldersResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionManageEldersResult>() {
  return ::lm::_UnionManageEldersResult_descriptor();
}
template <> struct is_proto_enum< ::lm::_UnionDealApplyStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_UnionDealApplyStatus>() {
  return ::lm::_UnionDealApplyStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_RaffleGoodsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RaffleGoodsType>() {
  return ::lm::_RaffleGoodsType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RafflePayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RafflePayType>() {
  return ::lm::_RafflePayType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RaffleCountType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RaffleCountType>() {
  return ::lm::_RaffleCountType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RaffleSoulGoodsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RaffleSoulGoodsType>() {
  return ::lm::_RaffleSoulGoodsType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RecruitPermitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RecruitPermitType>() {
  return ::lm::_RecruitPermitType_descriptor();
}
template <> struct is_proto_enum< ::lm::_ToughenExpressmanType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ToughenExpressmanType>() {
  return ::lm::_ToughenExpressmanType_descriptor();
}
template <> struct is_proto_enum< ::lm::_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_Status>() {
  return ::lm::_Status_descriptor();
}
template <> struct is_proto_enum< ::lm::_OfficeInvadeFailureReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_OfficeInvadeFailureReason>() {
  return ::lm::_OfficeInvadeFailureReason_descriptor();
}
template <> struct is_proto_enum< ::lm::_FortType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_FortType>() {
  return ::lm::_FortType_descriptor();
}
template <> struct is_proto_enum< ::lm::_GridEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_GridEventType>() {
  return ::lm::_GridEventType_descriptor();
}
template <> struct is_proto_enum< ::lm::_GridTrapEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_GridTrapEventType>() {
  return ::lm::_GridTrapEventType_descriptor();
}
template <> struct is_proto_enum< ::lm::_GridRandEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_GridRandEventType>() {
  return ::lm::_GridRandEventType_descriptor();
}
template <> struct is_proto_enum< ::lm::_OfficeInvadeProduceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_OfficeInvadeProduceType>() {
  return ::lm::_OfficeInvadeProduceType_descriptor();
}
template <> struct is_proto_enum< ::lm::_OfficeInvadeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_OfficeInvadeType>() {
  return ::lm::_OfficeInvadeType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RefreshDay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RefreshDay>() {
  return ::lm::_RefreshDay_descriptor();
}
template <> struct is_proto_enum< ::lm::_PlunderStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_PlunderStatus>() {
  return ::lm::_PlunderStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_PlunderType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_PlunderType>() {
  return ::lm::_PlunderType_descriptor();
}
template <> struct is_proto_enum< ::lm::_PlunderRevengeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_PlunderRevengeType>() {
  return ::lm::_PlunderRevengeType_descriptor();
}
template <> struct is_proto_enum< ::lm::_PlunderResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_PlunderResult>() {
  return ::lm::_PlunderResult_descriptor();
}
template <> struct is_proto_enum< ::lm::_PlunderRecordStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_PlunderRecordStatus>() {
  return ::lm::_PlunderRecordStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_TaskDenyResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_TaskDenyResult>() {
  return ::lm::_TaskDenyResult_descriptor();
}
template <> struct is_proto_enum< ::lm::_TradeRoadBranchLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_TradeRoadBranchLevel>() {
  return ::lm::_TradeRoadBranchLevel_descriptor();
}
template <> struct is_proto_enum< ::lm::_TradeRoadBoxChestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_TradeRoadBoxChestType>() {
  return ::lm::_TradeRoadBoxChestType_descriptor();
}
template <> struct is_proto_enum< ::lm::_TradeRoadBranchStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_TradeRoadBranchStatus>() {
  return ::lm::_TradeRoadBranchStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_TradeRoadCityStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_TradeRoadCityStatus>() {
  return ::lm::_TradeRoadCityStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_StorySeasonRewardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_StorySeasonRewardType>() {
  return ::lm::_StorySeasonRewardType_descriptor();
}
template <> struct is_proto_enum< ::lm::_ExpressmanStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ExpressmanStatus>() {
  return ::lm::_ExpressmanStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_ExpressmanOrigin> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ExpressmanOrigin>() {
  return ::lm::_ExpressmanOrigin_descriptor();
}
template <> struct is_proto_enum< ::lm::_VIPEffectId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_VIPEffectId>() {
  return ::lm::_VIPEffectId_descriptor();
}
template <> struct is_proto_enum< ::lm::_OperatingAchievementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_OperatingAchievementType>() {
  return ::lm::_OperatingAchievementType_descriptor();
}
template <> struct is_proto_enum< ::lm::_CarnivalTaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CarnivalTaskType>() {
  return ::lm::_CarnivalTaskType_descriptor();
}
template <> struct is_proto_enum< ::lm::_CarnivalCalcType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CarnivalCalcType>() {
  return ::lm::_CarnivalCalcType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RankingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RankingType>() {
  return ::lm::_RankingType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RankingExtraInfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RankingExtraInfoType>() {
  return ::lm::_RankingExtraInfoType_descriptor();
}
template <> struct is_proto_enum< ::lm::_ChatRoomType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ChatRoomType>() {
  return ::lm::_ChatRoomType_descriptor();
}
template <> struct is_proto_enum< ::lm::_ChatEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ChatEventType>() {
  return ::lm::_ChatEventType_descriptor();
}
template <> struct is_proto_enum< ::lm::_RandomShopRefreshStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_RandomShopRefreshStatus>() {
  return ::lm::_RandomShopRefreshStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_BadgeAchievementType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_BadgeAchievementType>() {
  return ::lm::_BadgeAchievementType_descriptor();
}
template <> struct is_proto_enum< ::lm::_WorldBossStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_WorldBossStatus>() {
  return ::lm::_WorldBossStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_CountryBattleCommerceStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CountryBattleCommerceStatus>() {
  return ::lm::_CountryBattleCommerceStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_MaterialRecycleBoxChestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_MaterialRecycleBoxChestType>() {
  return ::lm::_MaterialRecycleBoxChestType_descriptor();
}
template <> struct is_proto_enum< ::lm::_CountryBattleStartError> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_CountryBattleStartError>() {
  return ::lm::_CountryBattleStartError_descriptor();
}
template <> struct is_proto_enum< ::lm::_FriendSearchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_FriendSearchType>() {
  return ::lm::_FriendSearchType_descriptor();
}
template <> struct is_proto_enum< ::lm::_FriendOptStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_FriendOptStatus>() {
  return ::lm::_FriendOptStatus_descriptor();
}
template <> struct is_proto_enum< ::lm::_ErrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::_ErrorType>() {
  return ::lm::_ErrorType_descriptor();
}
template <> struct is_proto_enum< ::lm::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lm::MessageType>() {
  return ::lm::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_5fenum_2eproto__INCLUDED
