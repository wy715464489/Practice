// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_enum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lm {

namespace {

const ::google::protobuf::EnumDescriptor* _AssetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _AssetSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RobotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _SystemId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _AdvanceMatchResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ArenaSeasonIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ArenaOpponentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CarrierUp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CDKeyError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _DailyTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _EscortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _EscortEndStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionJoinedStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionMemberType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionMemberOptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionWorshipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionApplyJoinStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionAssignResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionManageEldersResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _UnionDealApplyStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RaffleGoodsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RafflePayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RaffleCountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RaffleSoulGoodsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RecruitPermitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ToughenExpressmanType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _OfficeInvadeFailureReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _FortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _GridEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _GridTrapEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _GridRandEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _OfficeInvadeProduceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _OfficeInvadeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RefreshDay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _PlunderStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _PlunderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _PlunderRevengeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _PlunderResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _PlunderRecordStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _TaskDenyResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _TradeRoadBranchLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _TradeRoadBoxChestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _TradeRoadBranchStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _TradeRoadCityStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _StorySeasonRewardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ExpressmanStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ExpressmanOrigin_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _VIPEffectId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _OperatingAchievementType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CarnivalTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CarnivalCalcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RankingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RankingExtraInfoType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ChatRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ChatEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _RandomShopRefreshStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _BadgeAchievementType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _WorldBossStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CountryBattleCommerceStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _MaterialRecycleBoxChestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _CountryBattleStartError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _FriendSearchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _FriendOptStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* _ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5fenum_2eproto() {
  protobuf_AddDesc_common_5fenum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_enum.proto");
  GOOGLE_CHECK(file != NULL);
  _AssetType_descriptor_ = file->enum_type(0);
  _AssetSource_descriptor_ = file->enum_type(1);
  _RobotType_descriptor_ = file->enum_type(2);
  _SystemId_descriptor_ = file->enum_type(3);
  _AdvanceMatchResult_descriptor_ = file->enum_type(4);
  _ArenaSeasonIndex_descriptor_ = file->enum_type(5);
  _ArenaOpponentType_descriptor_ = file->enum_type(6);
  _CarrierUp_descriptor_ = file->enum_type(7);
  _CDKeyError_descriptor_ = file->enum_type(8);
  _DailyTaskType_descriptor_ = file->enum_type(9);
  _EscortType_descriptor_ = file->enum_type(10);
  _EscortEndStatus_descriptor_ = file->enum_type(11);
  _UnionJoinedStatus_descriptor_ = file->enum_type(12);
  _UnionMemberType_descriptor_ = file->enum_type(13);
  _UnionMemberOptType_descriptor_ = file->enum_type(14);
  _UnionErrorType_descriptor_ = file->enum_type(15);
  _UnionWorshipType_descriptor_ = file->enum_type(16);
  _UnionApplyJoinStatus_descriptor_ = file->enum_type(17);
  _UnionAssignResult_descriptor_ = file->enum_type(18);
  _UnionManageEldersResult_descriptor_ = file->enum_type(19);
  _UnionDealApplyStatus_descriptor_ = file->enum_type(20);
  _RaffleGoodsType_descriptor_ = file->enum_type(21);
  _RafflePayType_descriptor_ = file->enum_type(22);
  _RaffleCountType_descriptor_ = file->enum_type(23);
  _RaffleSoulGoodsType_descriptor_ = file->enum_type(24);
  _RecruitPermitType_descriptor_ = file->enum_type(25);
  _ToughenExpressmanType_descriptor_ = file->enum_type(26);
  _Status_descriptor_ = file->enum_type(27);
  _OfficeInvadeFailureReason_descriptor_ = file->enum_type(28);
  _FortType_descriptor_ = file->enum_type(29);
  _GridEventType_descriptor_ = file->enum_type(30);
  _GridTrapEventType_descriptor_ = file->enum_type(31);
  _GridRandEventType_descriptor_ = file->enum_type(32);
  _OfficeInvadeProduceType_descriptor_ = file->enum_type(33);
  _OfficeInvadeType_descriptor_ = file->enum_type(34);
  _RefreshDay_descriptor_ = file->enum_type(35);
  _PlunderStatus_descriptor_ = file->enum_type(36);
  _PlunderType_descriptor_ = file->enum_type(37);
  _PlunderRevengeType_descriptor_ = file->enum_type(38);
  _PlunderResult_descriptor_ = file->enum_type(39);
  _PlunderRecordStatus_descriptor_ = file->enum_type(40);
  _TaskDenyResult_descriptor_ = file->enum_type(41);
  _TradeRoadBranchLevel_descriptor_ = file->enum_type(42);
  _TradeRoadBoxChestType_descriptor_ = file->enum_type(43);
  _TradeRoadBranchStatus_descriptor_ = file->enum_type(44);
  _TradeRoadCityStatus_descriptor_ = file->enum_type(45);
  _StorySeasonRewardType_descriptor_ = file->enum_type(46);
  _ExpressmanStatus_descriptor_ = file->enum_type(47);
  _ExpressmanOrigin_descriptor_ = file->enum_type(48);
  _VIPEffectId_descriptor_ = file->enum_type(49);
  _OperatingAchievementType_descriptor_ = file->enum_type(50);
  _CarnivalTaskType_descriptor_ = file->enum_type(51);
  _CarnivalCalcType_descriptor_ = file->enum_type(52);
  _RankingType_descriptor_ = file->enum_type(53);
  _RankingExtraInfoType_descriptor_ = file->enum_type(54);
  _ChatRoomType_descriptor_ = file->enum_type(55);
  _ChatEventType_descriptor_ = file->enum_type(56);
  _RandomShopRefreshStatus_descriptor_ = file->enum_type(57);
  _BadgeAchievementType_descriptor_ = file->enum_type(58);
  _WorldBossStatus_descriptor_ = file->enum_type(59);
  _CountryBattleCommerceStatus_descriptor_ = file->enum_type(60);
  _MaterialRecycleBoxChestType_descriptor_ = file->enum_type(61);
  _CountryBattleStartError_descriptor_ = file->enum_type(62);
  _FriendSearchType_descriptor_ = file->enum_type(63);
  _FriendOptStatus_descriptor_ = file->enum_type(64);
  _ErrorType_descriptor_ = file->enum_type(65);
  MessageType_descriptor_ = file->enum_type(66);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5fenum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_common_5fenum_2eproto() {
}

void protobuf_AddDesc_common_5fenum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021common_enum.proto\022\002lm*\276\003\n\n_AssetType\022\016"
    "\n\nASSET_COIN\020\001\022\016\n\nASSET_GOLD\020\002\022\016\n\nASSET_"
    "FLAG\020\003\022\024\n\020ASSET_REPUTATION\020\004\022\017\n\013ASSET_GO"
    "ODS\020\005\022\024\n\020ASSET_EXPRESSMAN\020\006\022\031\n\025ASSET_EXP"
    "RESSMAN_COIN\020\007\022\024\n\020ASSET_ARENA_COIN\020\010\022\024\n\020"
    "ASSET_SKILL_BOOK\020\t\022\025\n\021ASSET_ARENA_MATCH\020"
    "\n\022\020\n\014ASSET_TICKET\020\013\022\021\n\rASSET_PLUNDER\020\014\022\022"
    "\n\016ASSET_ACITIVTY\020\r\022\027\n\023ASSET_OFFICE_INVAD"
    "E\020\016\022\031\n\025ASSET_TRADE_ROAD_COIN\020\017\022\026\n\022ASSET_"
    "PLUNDER_COIN\020\020\022\024\n\020ASSET_UNION_COIN\020\021\022\025\n\021"
    "ASSET_STREET_COIN\020\022\022\030\n\024ASSET_COUNTRY_BAT"
    "TLE\020\023\022\031\n\025ASSET_MATERIAL_SOURCE\020\024*+\n\014_Ass"
    "etSource\022\033\n\027ASSET_SOURCE_EXPRESSMAN\020\001*t\n"
    "\n_RobotType\022\024\n\020ROBOT_TYPE_ARENA\020\001\022\026\n\022ROB"
    "OT_TYPE_PLUNDER\020\002\022\031\n\025ROBOT_TYPE_TRADE_RO"
    "AD\020\003\022\035\n\031ROBOT_TYPE_COUNTRY_BATTLE\020\004*\362\004\n\t"
    "_SystemId\022\022\n\016PLUNDER_SYSTEM\020\001\022\025\n\021DAILY_T"
    "ASK_SYSTEM\020\002\022\022\n\016KITCHEN_SYSTEM\020\003\022\023\n\017WORK"
    "SHOP_SYSTEM\020\004\022\021\n\rESCORT_SYSTEM\020\005\022\017\n\013SHOP"
    "_SYSTEM\020\006\022\022\n\016CARRIER_SYSTEM\020\007\022\023\n\017ACTIVIT"
    "Y_SYSTEM\020\010\022\022\n\016SPONSOR_SYSTEM\020\t\022\023\n\017ARENA_"
    "PK_SYSTEM\020\n\022\022\n\016RECRUIT_SYSTEM\020\013\022\021\n\rEXCHA"
    "NGE_COIN\020\014\022\021\n\rEXCHANGE_FLAG\020\r\022\016\n\nBAG_SYS"
    "TEM\020\016\022\032\n\026ACTIVITY_RACING_SYSTEM\020\020\022\032\n\026ACT"
    "IVITY_MINING_SYSTEM\020\021\022\033\n\027ACTIVITY_HUNTIN"
    "G_SYSTEM\020\022\022\033\n\027ACTIVITY_DEFENSE_SYSTEM\020\023\022"
    "\025\n\021EXPRESSMAN_SYSTEM\020\025\022\025\n\021ORDER_LIST_SYS"
    "TEM\020\026\022\020\n\014ARENA_SYSTEM\020\030\022\016\n\nARENA_SHOP\020\031\022"
    "\r\n\tGOLD_SHOP\020\032\022\016\n\nTRADE_ROAD\020\033\022\030\n\024OFFICE"
    "_INVADE_SYSTEM\020\035\022\021\n\rUNIONS_SYSTEM\020(\022\021\n\rS"
    "TREET_SYSTEM\020-\022\025\n\021WORLD_BOSS_SYSTEM\020.\022\031\n"
    "\025COUNTRY_BATTLE_SYSTEM\0201*J\n\023_AdvanceMatc"
    "hResult\022\030\n\024ADVANCE_MATCH_FAILED\020\000\022\031\n\025ADV"
    "ANCE_MATCH_SUCCESS\020\001*A\n\021_ArenaSeasonInde"
    "x\022\025\n\021CURR_ARENA_SEASON\020\000\022\025\n\021LAST_ARENA_S"
    "EASON\020\001*I\n\022_ArenaOpponentType\022\031\n\025ARENA_O"
    "PPONENT_PLAYER\020\001\022\030\n\024ARENA_OPPONENT_ROBOT"
    "\020\002*\226\001\n\n_CarrierUp\022\026\n\022CARRIER_UP_QUALITY\020"
    "\000\022\027\n\023CARRIER_UP_LEVEL_HP\020\001\022\033\n\027CARRIER_UP"
    "_LEVEL_ATTACK\020\002\022\032\n\026CARRIER_UP_LEVEL_SPEE"
    "D\020\003\022\036\n\032CARRIER_UP_LEVEL_ATT_SPEED\020\004*\233\002\n\013"
    "_CDKeyError\022\035\n\031CDKEY_ERROR_INVALID_CDKEY"
    "\020\001\022\032\n\026CDKEY_ERROR_CDKEY_USED\020\002\022\036\n\032CDKEY_"
    "ERROR_SAME_TYPE_USED\020\003\022#\n\037CDKEY_ERROR_UN"
    "SUPPORTED_CHANNEL\020\004\022&\n\"CDKEY_ERROR_UNSUP"
    "PORTED_GAMESERVER\020\005\022\035\n\031CDKEY_ERROR_CDKEY"
    "_OVERDUE\020\006\022(\n$CDKEY_ERROR_CDKEY_NO_REMAI"
    "NING_COUNT\020\007\022\033\n\027CDKEY_ERROR_OTHER_ERROR\020"
    "\010*\323\n\n\016_DailyTaskType\022\036\n\032DAILY_TASK_COMPL"
    "ETE_ESCORT\020\001\022 \n\034DAILY_TASK_UPLEVEL_EQUIP"
    "MENT\020\002\022\034\n\030DAILY_TASK_UPLEVEL_SKILL\020\003\022\037\n\033"
    "DAILY_TASK_COMPLETE_PLUNDER\020\004\022\027\n\023DAILY_T"
    "ASK_EAT_FOOD\020\005\022$\n DAILY_TASK_COMPLETE_AR"
    "ENA_COMBAT\020\006\022 \n\034DAILY_TASK_COMPLETE_ACTI"
    "VITY\020\007\022\032\n\026DAILY_TASK_BUY_OUTLETS\020\010\022!\n\035DA"
    "ILY_TASK_GOLD_EXCHANGE_COIN\020\t\022\036\n\032DAILY_T"
    "ASK_PLUNDER_SUCCESS\020\n\022!\n\035DAILY_TASK_ESCO"
    "RT_THREE_STARS\020\013\022\036\n\032DAILY_TASK_UPLEVEL_C"
    "ARRIER\020\014\022#\n\037DAILY_TASK_COLLECT_KITCHEN_F"
    "OOD\020\r\022\027\n\023DAILY_TASK_USE_HEWU\020\016\022\032\n\026DAILY_"
    "TASK_DEFUSE_MINE\020\017\022%\n!DAILY_TASK_DESTRUC"
    "T_ROLLING_STONE\020\020\022\037\n\033DAILY_TASK_WIN_AREN"
    "A_COMBAT\020\021\022!\n\035DAILY_TASK_CAST_CARRIER_SK"
    "ILL\020\022\022\033\n\027DAILY_TASK_ASSIGN_TASKS\020\023\022\037\n\033DA"
    "ILY_TASK_DEFUSE_GEAR_MINE\020\024\022\033\n\027DAILY_TAS"
    "K_BUY_MATERIAL\020\025\022\033\n\027DAILY_TASK_SIGN_SPON"
    "SOR\020\026\022\037\n\033DAILY_TASK_COLLECT_WORKSHOP\020\027\022\032"
    "\n\026DAILY_TASK_HUNT_ANIMAL\020\030\022\032\n\026DAILY_TASK"
    "_KILL_ROBBER\020\031\022\035\n\031DAILY_TASK_DESTRUCT_FE"
    "NCE\020\032\022\031\n\025DAILY_TASK_MINING_ORE\020\033\022!\n\035DAIL"
    "Y_TASK_RECRUIT_EXPRESSMAN\020\034\022\032\n\026DAILY_TAS"
    "K_HELP_FRIEND\020\035\022\036\n\032DAILY_TASK_COMPLETE_R"
    "ACING\020\036\022\036\n\032DAILY_TASK_COMPLETE_MINING\020\037\022"
    "\037\n\033DAILY_TASK_COMPLETE_HUNTING\020 \022\037\n\033DAIL"
    "Y_TASK_COMPLETE_DEFENSE\020!\022\034\n\030DAILY_TASK_"
    "OFFICE_INVADE\020\"\022!\n\035DAILY_TASK_TOUGHEN_EX"
    "PRESSMAN\020$\022\036\n\032DAILY_TASK_CARRIER_UPGRADE"
    "\020%\022#\n\037DAILY_TASK_TRADE_ROAD_OPERATION\020&\022"
    ",\n(DAILY_TASK_TRADE_ROAD_ADVANCED_OPERAT"
    "ION\020\'\022\025\n\021DAILY_TASK_RAFFLE\020(\022#\n\037DAILY_TA"
    "SK_COMPLETE_ELITE_STORY\020)\022\035\n\031DAILY_TASK_"
    "COUNTRY_BATTLE\020*\022\035\n\031DAILY_TASK_SIMULATE_"
    "FIGHT\020+*\223\003\n\013_EscortType\022\026\n\022ESCORT_NORMAL"
    "_TASK\020\000\022\035\n\031ESCORT_REPLENISHMENT_TASK\020\001\022\020"
    "\n\014ESCORT_ARENA\020\002\022\023\n\017ESCORT_ACTIVITY\020\003\022\021\n"
    "\rESCORT_RACING\020\004\022\021\n\rESCORT_MINING\020\005\022\022\n\016E"
    "SCORT_HUNTING\020\006\022\022\n\016ESCORT_DEFENSE\020\007\022\031\n\025E"
    "SCORT_PLUNDER_ASSIGN\020\010\022\030\n\024ESCORT_DEMONST"
    "RATION\020\t\022\025\n\021ESCORT_STORY_TASK\020\n\022\025\n\021ESCOR"
    "T_TRADE_ROAD\020\013\022\021\n\rESCORT_INVADE\020\014\022\025\n\021ESC"
    "ORT_UNION_TRAP\020\r\022\025\n\021ESCORT_WORLD_BOSS\020\016\022"
    "\031\n\025ESCORT_SIMULATE_FIGHT\020\017\022\031\n\025ESCORT_COU"
    "NTRY_BATTLE\020\020*\273\001\n\020_EscortEndStatus\022\026\n\022ES"
    "CORT_END_SUCCESS\020\000\022\026\n\022ESCORT_END_FAILURE"
    "\020\001\022\030\n\024ESCORT_END_PLUNDERED\020\002\022\027\n\023ESCORT_E"
    "ND_TIME_OUT\020\003\022\"\n\036ESCORT_END_WORLD_BOSS_D"
    "EFEATED\020\n\022 \n\034ESCORT_END_WORLD_BOSS_CLOSE"
    "D\020\013*c\n\022_UnionJoinedStatus\022\027\n\023UNION_STATU"
    "S_NORMAL\020\001\022\036\n\032UNION_STATUS_DISSOLUTIONED"
    "\020\002\022\024\n\020UNION_STATUS_OUT\020\003*K\n\020_UnionMember"
    "Type\022\023\n\017UNION_PRESIDENT\020\001\022\020\n\014UNION_ELDER"
    "S\020\002\022\020\n\014UNION_MEMBER\020\003*J\n\023_UnionMemberOpt"
    "Type\022\032\n\026UNION_PROMOTION_ELDERS\020\001\022\027\n\023UNIO"
    "N_CANCEL_ELDERS\020\002*\206\001\n\017_UnionErrorType\022\024\n"
    "\020UNION_KICKED_OUT\020\001\022\027\n\023UNION_DISSOLUTION"
    "ED\020\002\022\024\n\020UNION_MEMBER_OUT\020\003\022\022\n\016UNION_IN_U"
    "NION\020\004\022\032\n\026UNION_AUTHORITY_FAILED\020\005*R\n\021_U"
    "nionWorshipType\022\023\n\017WORSHIP_PRIMARY\020\001\022\022\n\016"
    "WORSHIP_MEDIUM\020\002\022\024\n\020WORSHIP_ADVANCED\020\003*\340"
    "\001\n\025_UnionApplyJoinStatus\022\034\n\030UNION_APPLY_"
    "JOIN_SUCCESS\020\001\022\035\n\031UNION_APPLY_JOIN_NO_UN"
    "ION\020\002\022$\n UNION_APPLY_JOIN_UNION_NOT_EXIS"
    "T\020\003\022\036\n\032UNION_APPLY_JOIN_HAS_APPLY\020\004\022$\n U"
    "NION_APPLY_JOIN_LEVEL_DEFICIENT\020\005\022\036\n\032UNI"
    "ON_APPLY_JOIN_LIST_FULL\020\006*G\n\022_UnionAssig"
    "nResult\022\030\n\024UNION_ASSIGN_SUCCESS\020\001\022\027\n\023UNI"
    "ON_ASSIGN_FAILED\020\002*Y\n\030_UnionManageElders"
    "Result\022\037\n\033UNION_MANAGE_ELDERS_SUCCESS\020\001\022"
    "\034\n\030UNION_MANAGE_ELDERS_FULL\020\002*\221\001\n\025_Union"
    "DealApplyStatus\022\034\n\030UNION_DEAL_APPLY_SUCC"
    "ESS\020\001\022\031\n\025UNION_DEAL_APPLY_FULL\020\002\022\037\n\033UNIO"
    "N_DEAL_APPLY_HAS_JOINED\020\003\022\036\n\032UNION_DEAL_"
    "APPLY_NOT_EXIST\020\004*T\n\020_RaffleGoodsType\022\025\n"
    "\021RAFFLE_EXPRESSMAN\020\001\022\020\n\014RAFFLE_GOODS\020\002\022\027"
    "\n\023RAFFLE_TRANS_DEBRIS\020\003*S\n\016_RafflePayTyp"
    "e\022\032\n\026EXPRESSMAN_COIN_RAFFLE\020\001\022\017\n\013GOLD_RA"
    "FFLE\020\002\022\024\n\020SOUL_GOLD_RAFFLE\020\003*2\n\020_RaffleC"
    "ountType\022\016\n\nRAFFLE_ONE\020\001\022\016\n\nRAFFLE_TEN\020\002"
    "*\225\001\n\024_RaffleSoulGoodsType\022\032\n\026RAFFLE_SOUL"
    "_EXPRESSMAN\020\001\022\027\n\023RAFFLE_SOUL_DEBRI_1\020\002\022\027"
    "\n\023RAFFLE_SOUL_DEBRI_2\020\003\022\027\n\023RAFFLE_SOUL_D"
    "EBRI_3\020\004\022\026\n\022RAFFLE_SOUL_NORMAL\020\005*I\n\022_Rec"
    "ruitPermitType\022\030\n\024FIRST_RECRUIT_PERMIT\020\001"
    "\022\031\n\025SECOND_RECRUIT_PERMIT\020\002*X\n\026_ToughenE"
    "xpressmanType\022\022\n\016COMMON_TOUGHEN\020\001\022\024\n\020ADV"
    "ANCED_TOUGHEN\020\002\022\024\n\020ULTIMATE_TOUGHEN\020\003*l\n"
    "\007_Status\022\013\n\007SUCCESS\020\000\022\027\n\023CHARACTER_NOT_E"
    "XIST\020\001\022\022\n\016DUPLICATE_NAME\020\002\022\022\n\016SENSITIVE_"
    "WORD\020\003\022\023\n\017SESSION_EXPIRED\020\004*\273\001\n\032_OfficeI"
    "nvadeFailureReason\022!\n\035OFFICE_INVADE_FAIL"
    "URE_NO_DICE\020\001\022(\n$OFFICE_INVADE_FAILURE_A"
    "TTACK_TIMEOUT\020\002\022\'\n#OFFICE_INVADE_FAILURE"
    "_NO_EXPRESSMEN\020\003\022\'\n#OFFICE_INVADE_FAILUR"
    "E_PLAYER_CANCEL\020\004*6\n\t_FortType\022\022\n\016FORT_T"
    "YPE_MINI\020\001\022\025\n\021FORT_TYPE_STORAGE\020\002*\266\001\n\016_G"
    "ridEventType\022\037\n\022GRID_EVENT_NOTHING\020\377\377\377\377\377"
    "\377\377\377\377\001\022\023\n\017GRID_EVENT_GIFT\020\001\022\025\n\021GRID_EVENT"
    "_RANDOM\020\002\022\023\n\017GRID_EVENT_DICE\020\003\022\023\n\017GRID_E"
    "VENT_TRAP\020\004\022\030\n\024GRID_EVENT_MINI_FORT\020\005\022\023\n"
    "\017GRID_EVENT_FORT\020\006*8\n\022_GridTrapEventType"
    "\022\"\n\036GRID_TRAP_EVENT_DECREASE_POWER\020\001*s\n\022"
    "_GridRandEventType\022\033\n\027GRID_RAND_EVENT_FO"
    "RWARD\020\001\022\034\n\030GRID_RAND_EVENT_BACKWARD\020\002\022\"\n"
    "\036GRID_RAND_EVENT_INCREASE_POWER\020\004*[\n\030_Of"
    "ficeInvadeProduceType\022!\n\035OFFICE_INVADE_E"
    "XPRESSMAN_COIN\020\001\022\034\n\030OFFICE_INVADE_SKILL_"
    "BOOK\020\002*R\n\021_OfficeInvadeType\022\035\n\031OFFICE_IN"
    "VADE_TYPE_NORMAL\020\001\022\036\n\032OFFICE_INVADE_TYPE"
    "_REVENGE\020\002*&\n\013_RefreshDay\022\t\n\005TODAY\020\000\022\014\n\010"
    "TOMORROW\020\001*\216\001\n\016_PlunderStatus\022\020\n\014PLUNDER"
    "_IDLE\020\000\022\034\n\030PLUNDERING_REALTIME_TASK\020\001\022\032\n"
    "\026PLUNDERING_ONLINE_TASK\020\002\022\032\n\026PLUNDERING_"
    "ASSIGN_TASK\020\003\022\024\n\020PLUNDER_FINISHED\020\004*8\n\014_"
    "PlunderType\022\024\n\020PLUNDER_REALTIME\020\001\022\022\n\016PLU"
    "NDER_ASSIGN\020\002*H\n\023_PlunderRevengeType\022\027\n\023"
    "PLUNDER_NORMAL_TYPE\020\001\022\030\n\024PLUNDER_REVENGE"
    "_TYPE\020\002*N\n\016_PlunderResult\022\023\n\017PLUNDER_SUC"
    "CESS\020\001\022\022\n\016PLUNDER_FAILED\020\002\022\023\n\017PLUNDER_TI"
    "MEOUT\020\003*\224\001\n\024_PlunderRecordStatus\022\027\n\023PLUN"
    "DER_RECORD_IDLE\020\001\022\034\n\030PLUNDER_RECORD_REVE"
    "NGING\020\002\022\"\n\036PLUNDER_RECORD_REVENGE_SUCCES"
    "S\020\003\022!\n\035PLUNDER_RECORD_REVENGE_FAILED\020\004*P"
    "\n\017_TaskDenyResult\022\013\n\007NOTHING\020\000\022\021\n\rDOUBLE"
    "_REWARD\020\001\022\021\n\rTRIPLE_REWARD\020\002\022\n\n\006PUNISH\020\003"
    "*N\n\025_TradeRoadBranchLevel\022\031\n\025TRADE_ROAD_"
    "BRANCH_LOW\020\000\022\032\n\026TRADE_ROAD_BRANCH_HIGH\020\001"
    "*U\n\026_TradeRoadBoxChestType\022\034\n\030TRADE_ROAD"
    "_BOX_CHEST_LOW\020\001\022\035\n\031TRADE_ROAD_BOX_CHEST"
    "_HIGH\020\002*\320\001\n\026_TradeRoadBranchStatus\022\034\n\030TR"
    "ADE_ROAD_BRANCH_UNOPEN\020\000\022\032\n\026TRADE_ROAD_B"
    "RANCH_LOCK\020\001\022\032\n\026TRADE_ROAD_BRANCH_OPEN\020\002"
    "\022\037\n\033TRADE_ROAD_BRANCH_OPERATING\020\003\022\035\n\031TRA"
    "DE_ROAD_BRANCH_FETCHED\020\004\022 \n\034TRADE_ROAD_B"
    "RANCH_BOX_OPENED\020\005*\202\001\n\024_TradeRoadCitySta"
    "tus\022\032\n\026TRADE_ROAD_CITY_UNOPEN\020\000\022\030\n\024TRADE"
    "_ROAD_CITY_LOCK\020\001\022\032\n\026TRADE_ROAD_CITY_UNL"
    "OCK\020\002\022\030\n\024TRADE_ROAD_CITY_DONE\020\003*H\n\026_Stor"
    "ySeasonRewardType\022\025\n\021STORY_REWARD_YEAR\020\001"
    "\022\027\n\023STORY_REWARD_SEASON\020\002**\n\021_Expressman"
    "Status\022\010\n\004REST\020\000\022\013\n\007WORKING\020\001*q\n\021_Expres"
    "smanOrigin\022\032\n\026EXPRESSMAN_ORIGIN_SHOP\020\001\022 "
    "\n\034EXPRESSMAN_ORIGIN_ORDER_LIST\020\002\022\036\n\032EXPR"
    "ESSMAN_ORIGIN_RECHARGE\020\003*\303\006\n\014_VIPEffectI"
    "d\022\026\n\022MAX_BUY_FLAG_COUNT\020\001\022\026\n\022MAX_BUY_COI"
    "N_COUNT\020\002\022!\n\035MAX_BUY_EXPRESSMAN_COIN_COU"
    "NT\020\003\022\031\n\025MAX_BUY_PLUNDER_COUNT\020\004\022\027\n\023MAX_B"
    "UY_ARENA_COUNT\020\005\022 \n\034MAX_DAILY_TASK_REFRE"
    "SH_COUNT\020\006\022\027\n\023MAX_TASK_DENY_COUNT\020\007\022\032\n\026F"
    "LAG_PRODUCE_EVERYTIME\020\010\022\037\n\033MAX_SPONSOR_C"
    "OUNT_MEANWHILE\020\t\022\035\n\031EXTRA_SPONSOR_EXP_PE"
    "RCENT\020\n\022\022\n\016OPEN_GOLD_SHOP\020\013\022\027\n\023OPEN_ACTI"
    "VITY_SWEEP\020\014\022\032\n\026DOUBLE_KITCHEN_PRODUCE\020\r"
    "\022\037\n\033MAX_PLUNDER_COUNT_MEANWHILE\020\016\022 \n\034OPE"
    "N_DENY_TASK_TRIPLE_REWARD\020\017\022\031\n\025OPEN_ULTI"
    "MATE_TOUGHEN\020\020\022\032\n\026MAX_BUY_ACTIVITY_COUNT"
    "\020\021\022\037\n\033MAX_BUY_OFFICE_INVADE_COUNT\020\022\022\033\n\027D"
    "AILY_WORSHIP_NUM_LIMIT\020\023\022\037\n\033IS_SENIOR_WO"
    "RSHIP_AVAILABLE\020\024\022!\n\035MAX_BUY_CHALLENGE_S"
    "TAGE_COUNT\020\025\022\035\n\031MAX_BUY_ELITE_STAGE_COUN"
    "T\020\026\022(\n$IS_ONE_CLICK_EQUIP_UPGRADE_AVAILA"
    "BLE\020\027\022 \n\034DAILY_TRADE_ROAD_RESET_COUNT\020\030\022"
    "\033\n\027IS_RAFFLE_SOUL_BOX_OPEN\020\031\022&\n\"TASK_SEA"
    "RCH_IN_PERSON_NUM_UP_LIMIT\020\032\022 \n\034MAX_BUY_"
    "COUNTRY_BATTLE_COUNT\020\033*\230\004\n\031_OperatingAch"
    "ievementType\022\"\n\036OPERATING_ACHIEVEMENT_TY"
    "PE_MIN\020\000\022+\n\'OPERATING_ACHIEVEMENT_TYPE_O"
    "FFICE_LEVEL\020\001\022+\n\'OPERATING_ACHIEVEMENT_T"
    "YPE_OFFICE_POWER\020\002\0225\n1OPERATING_ACHIEVEM"
    "ENT_TYPE_EXPRESSMAN_TOTAL_GRADE\020\003\022.\n*OPE"
    "RATING_ACHIEVEMENT_TYPE_CARRIER_QUALITY\020"
    "\004\022/\n+OPERATING_ACHIEVEMENT_TYPE_ELITE_ST"
    "ORY_STAR\020\n\0222\n.OPERATING_ACHIEVEMENT_TYPE"
    "_CUMULATIVE_RECHARGE\020\013\022*\n&OPERATING_ACHI"
    "EVEMENT_TYPE_ASSIGN_TASK\020\014\0225\n1OPERATING_"
    "ACHIEVEMENT_TYPE_EXPRESSMAN_COIN_RAFFLE\020"
    "\r\022*\n&OPERATING_ACHIEVEMENT_TYPE_GOLD_RAF"
    "FLE\020\016\022\"\n\036OPERATING_ACHIEVEMENT_TYPE_MAX\020"
    "\017*\307\n\n\021_CarnivalTaskType\022\032\n\026CARNIVAL_TASK"
    "_TYPE_MIN\020\000\022#\n\037CARNIVAL_TASK_TYPE_OFFICE"
    "_LEVEL\020\001\022#\n\037CARNIVAL_TASK_TYPE_OFFICE_PO"
    "WER\020\002\022\037\n\033CARNIVAL_TASK_TYPE_RECHARGE\020\003\022 "
    "\n\034CARNIVAL_TASK_TYPE_GOLD_COST\020\004\022 \n\034CARN"
    "IVAL_TASK_TYPE_COIN_COST\020\005\022+\n\'CARNIVAL_T"
    "ASK_TYPE_EXPRESSMAN_COIN_COST\020\006\022 \n\034CARNI"
    "VAL_TASK_TYPE_FLAG_COST\020\007\022\037\n\033CARNIVAL_TA"
    "SK_TYPE_BUY_FLAG\020\010\022#\n\037CARNIVAL_TASK_TYPE"
    "_COLlECT_FLAG\020\t\022\037\n\033CARNIVAL_TASK_TYPE_BU"
    "Y_COIN\020\n\022-\n)CARNIVAL_TASK_TYPE_EXPRESSMA"
    "N_COIN_RAFFER\020\013\022\"\n\036CARNIVAL_TASK_TYPE_GO"
    "LD_RAFFLE\020\014\022(\n$CARNIVAL_TASK_TYPE_FINISH"
    "_DAILY_TASK\020\r\022#\n\037CARNIVAL_TASK_TYPE_AREA"
    "N_ESCORT\020\016\022%\n!CARNIVAL_TASK_TYPE_PLUNDER"
    "_ESCORT\020\017\022&\n\"CARNIVAL_TASK_TYPE_ACTIVITY"
    "_ESCORT\020\020\022+\n\'CARNIVAL_TASK_TYPE_OFFICE_I"
    "NVADE_ESCORT\020\021\022*\n&CARNIVAL_TASK_TYPE_OFF"
    "ICE_INVADE_LEVEL\020\022\022(\n$CARNIVAL_TASK_TYPE"
    "_TRADE_ROAD_ESCORT\020\023\022(\n$CARNIVAL_TASK_TY"
    "PE_UNION_TRAP_ESCORT\020\024\022)\n%CARNIVAL_TASK_"
    "TYPE_CARRIER_PART_LEVEL\020\025\022(\n$CARNIVAL_TA"
    "SK_TYPE_WORLD_BOSS_ESCORT\020\026\022\"\n\036CARNIVAL_"
    "TASK_TYPE_TASK_FINISH\020\027\022\"\n\036CARNIVAL_TASK"
    "_TYPE_TASK_ESCORT\020\030\022\"\n\036CARNIVAL_TASK_TYP"
    "E_TASK_ASSIGN\020\031\022)\n%CARNIVAL_TASK_TYPE_EL"
    "ITE_STORY_ESCORT\020\032\022(\n$CARNIVAL_TASK_TYPE"
    "_ELITE_STORY_STARS\020\033\022*\n&CARNIVAL_TASK_TY"
    "PE_SPECIAL_TASK_FINISH\020\034\022%\n!CARNIVAL_TAS"
    "K_TYPE_CONSIGNER_STAR\020\035\022\'\n#CARNIVAL_TASK"
    "_TYPE_EXPRESSMAN_COUNT\020\036\022\037\n\033CARNIVAL_TAS"
    "K_TYPE_SKILL_UP\020\037\022#\n\037CARNIVAL_TASK_TYPE_"
    "EQUIPMENT_UP\020 \022\037\n\033CARNIVAL_TASK_TYPE_MOR"
    "AL_UP\020!\022\032\n\026CARNIVAL_TASK_TYPE_MAX\020\"*T\n\021_"
    "CarnivalCalcType\022\037\n\033CARNIVAL_CALC_CURREN"
    "T_VALUE\020\000\022\036\n\032CARNIVAL_CALC_ACCUMULATION\020"
    "\001*\355\001\n\014_RankingType\022\"\n\036RANKING_TYPE_ARENA"
    "_LAST_SEASON\020\001\022\"\n\036RANKING_TYPE_ARENA_CUR"
    "R_SEASON\020\002\022\035\n\031RANKING_TYPE_OFFICE_POWER\020"
    "\003\022!\n\035RANKING_TYPE_EXPRESSMAN_POWER\020\004\022\036\n\032"
    "RANKING_TYPE_CARRIER_POWER\020\005\022\026\n\022RANKING_"
    "TYPE_UNION\020\006\022\033\n\027RANKING_TYPE_WORLD_BOSS\020"
    "\007*\224\001\n\025_RankingExtraInfoType\022&\n\"RANKING_E"
    "XTRA_INFO_TYPE_ARENA_TEAM\020\001\022\'\n#RANKING_E"
    "XTRA_INFO_TYPE_ESCORT_TEAM\020\002\022*\n&RANKING_"
    "EXTRA_INFO_TYPE_WORLDBOSS_TEAM\020\003*/\n\r_Cha"
    "tRoomType\022\016\n\nWORLD_ROOM\020\001\022\016\n\nUNION_ROOM\020"
    "\002*\362\002\n\016_ChatEventType\022\022\n\016CHAT_EVENT_MIN\020\000"
    "\022 \n\034CHAT_EVENT_WORLD_BOOS_APPEAR\020\001\022\036\n\032CH"
    "AT_EVENT_WORLD_BOOS_FLEE\020\002\022 \n\034CHAT_EVENT"
    "_WORLD_BOOS_KILLED\020\003\022\037\n\033CHAT_EVENT_BUY_T"
    "RANSFORMERS\020\004\022\035\n\031CHAT_EVENT_CARRIER_UP_M"
    "AX\020\005\022 \n\034CHAT_EVENT_EXPRESSMAN_UP_MAX\020\006\022\036"
    "\n\032CHAT_EVENT_EQUIMENT_UP_MAX\020\007\022\036\n\032CHAT_E"
    "VENT_ARENA_UP_LEGEND\020\010\022\030\n\024CHAT_EVENT_BUY"
    "_APPLE\020\t\022\030\n\024CHAT_EVENT_BUY_ALASD\020\n\022\022\n\016CH"
    "AT_EVENT_MAX\020\013*\232\001\n\030_RandomShopRefreshSta"
    "tus\022\034\n\030RANDOM_SHOP_REFRESH_INIT\020\001\022\037\n\033RAN"
    "DOM_SHOP_REFRESH_OVERDUE\020\002\022\037\n\033RANDOM_SHO"
    "P_REFRESH_OPENING\020\003\022\036\n\032RANDOM_SHOP_REFRE"
    "SH_CLOSED\020\004*{\n\025_BadgeAchievementType\022\036\n\032"
    "BADGE_ACHIEVEMENT_TYPE_VIP\020\001\022 \n\034BADGE_AC"
    "HIEVEMENT_TYPE_ARENA\020\002\022 \n\034BADGE_ACHIEVEM"
    "ENT_TYPE_POWER\020\003*j\n\020_WorldBossStatus\022\023\n\017"
    "WORLD_BOSS_IDLE\020\001\022\023\n\017WORLD_BOSS_OPEN\020\002\022\025"
    "\n\021WORLD_BOSS_CLOSED\020\003\022\025\n\021WORLD_BOSS_KILL"
    "ED\020\004*\243\001\n\034_CountryBattleCommerceStatus\022\'\n"
    "#COUNTRY_BATTLE_COMMERCE_STATUS_IDLE\020\001\022,"
    "\n(COUNTRY_BATTLE_COMMERCE_STATUS_COMBATI"
    "NG\020\002\022,\n(COUNTRY_BATTLE_COMMERCE_STATUS_P"
    "ROTECTED\020\003*\216\001\n\034_MaterialRecycleBoxChestT"
    "ype\022#\n\037MATERIALS_RECYCLE_BOX_CHEST_LOW\020\001"
    "\022#\n\037MATERIALS_RECYCLE_BOX_CHEST_MID\020\002\022$\n"
    " MATERIALS_RECYCLE_BOX_CHEST_HIGH\020\003*\370\001\n\030"
    "_CountryBattleStartError\022%\n!COUNTRY_BATT"
    "LE_START_ERROR_OWNING\020\001\0220\n,COUNTRY_BATTL"
    "E_START_ERROR_LACK_ATTACK_COUNT\020\002\022(\n$COU"
    "NTRY_BATTLE_START_ERROR_COMBATING\020\003\022(\n$C"
    "OUNTRY_BATTLE_START_ERROR_PROTECTED\020\004\022/\n"
    "+COUNTRY_BATTLE_START_ERROR_INVALID_COMM"
    "ERCE\020\005*J\n\021_FriendSearchType\022\031\n\025FRIEND_SE"
    "ARCH_PRECISE\020\001\022\032\n\026FRIEND_SEARCH_RECOMEND"
    "\020\002*p\n\020_FriendOptStatus\022\026\n\022FRIEND_OPT_SUC"
    "CESS\020\001\022\030\n\024FRIEND_OPT_NOT_EXIST\020\002\022\025\n\021FRIE"
    "ND_OPT_FAILED\020\003\022\023\n\017FRIEND_OPT_FULL\020\004*\222\002\n"
    "\n_ErrorType\022\r\n\tLACK_COIN\020\001\022\r\n\tLACK_GOLD\020"
    "\002\022\r\n\tLACK_FLAG\020\003\022\017\n\013LACK_TICKET\020\004\022\030\n\024LAC"
    "K_EXPRESSMAN_COIN\020\005\022\023\n\017LACK_ARENA_COIN\020\006"
    "\022\023\n\017LACK_SKILL_BOOK\020\007\022\025\n\021LACK_PLUNDER_CO"
    "IN\020\010\022\030\n\024LACK_TRADE_ROAD_COIN\020\t\022\016\n\nLACK_G"
    "OODS\020\n\022\022\n\016OVERFLOW_GOODS\020\013\022\023\n\017LACK_UNION"
    "_COIN\020\014\022\030\n\024LACK_MATERIAL_SOURCE\020\r*\374=\n\013Me"
    "ssageType\022\t\n\005LOGIN\020\001\022\024\n\020CREATE_CHARACTER"
    "\020\002\022\020\n\014LOGIN_STATUS\020\003\022\021\n\rOFFICE_RENAME\020\004\022"
    "\027\n\023OFFICE_LEVEL_REWARD\020\005\022\n\n\006LOGOUT\020\006\022\023\n\017"
    "GM_CHANGED_INFO\020\007\022\r\n\tTASK_LIST\020\n\022\r\n\tTASK"
    "_DENY\020\013\022\r\n\tTASK_READ\020\014\022\014\n\010TASK_ADD\020\r\022\017\n\013"
    "TASK_ASSIGN\020\016\022\036\n\032TASK_ASSIGN_RECEIVE_REW"
    "ARD\020\017\022\022\n\016CONSIGNER_LIST\020\020\022\034\n\030CONSIGNER_R"
    "ECEIVE_REWARD\020\021\022\r\n\tUSE_GOODS\020\036\022\016\n\nSELL_G"
    "OODS\020\037\022\023\n\017COMPOSITE_GOODS\020 \022\022\n\016PURCHASE_"
    "GOODS\020!\022\023\n\017USE_BUNDLE_FLAG\020\"\022\013\n\007USE_BOX\020"
    "#\022\021\n\rUSE_WAIST_TAG\020$\022\013\n\007RECRUIT\0202\022\017\n\013RAF"
    "FLE_INFO\0203\022\n\n\006RAFFLE\0204\022\017\n\013SOUL_RAFFLE\0205\022"
    "\021\n\rLEVELUP_SKILL\020F\022\026\n\022WORKING_EXPRESSMEN"
    "\020G\022\025\n\021LEVELUP_EQUIPMENT\020H\022\027\n\023QUALITYUP_E"
    "QUIPMENT\020I\022\022\n\016BUY_EXPRESSMAN\020J\022\024\n\020UNLOCK"
    "_EQUIPMENT\020K\022\032\n\026RECRUIT_NEW_EXPRESSMAN\020L"
    "\022\033\n\027MAJORGRADEUP_EXPRESSMAN\020M\022\021\n\rLEVELUP"
    "_MORAL\020N\022\023\n\017QUALITYUP_MORAL\020O\022\024\n\020MORAL_L"
    "EVEL_INFO\020P\022\023\n\017QUERY_TEAM_INFO\020Q\022\020\n\014ESCO"
    "RT_START\020Z\022\026\n\022ESCORT_STAGE_START\020[\022\027\n\023ES"
    "CORT_COMBAT_START\020\\\022\025\n\021ESCORT_COMBAT_END"
    "\020]\022\024\n\020ESCORT_STAGE_END\020^\022\016\n\nESCORT_END\020_"
    "\022\017\n\013ESCORT_SYNC\020d\022\023\n\017DAILY_TASK_LIST\020n\022\025"
    "\n\021DAILY_TASK_REWARD\020p\022\020\n\014KITCHEN_LIST\020x\022"
    "\034\n\030KITCHEN_COLLECT_ALL_FOOD\020y\022\023\n\016DEPLOY_"
    "CARRIER\020\202\001\022\020\n\013BUY_CARRIER\020\203\001\022\027\n\022STRENGTH"
    "EN_CARRIER\020\204\001\022\023\n\016REPAIR_CARRIER\020\205\001\022\027\n\022CA"
    "RRIER_EQUIP_PART\020\206\001\022\032\n\025CARRIER_UN_EQUIP_"
    "PART\020\207\001\022\030\n\023CARRIER_UNLOCK_PART\020\210\001\022\032\n\025CAR"
    "RIER_LEVEL_UP_PART\020\211\001\022\032\n\025CARRIER_GRADE_U"
    "P_PART\020\212\001\022\021\n\014OUTLETS_LIST\020\240\001\022\020\n\013OUTLETS_"
    "BUY\020\241\001\022\024\n\017OUTLETS_REFRESH\020\242\001\022\021\n\014PLUNDER_"
    "INFO\020\252\001\022\023\n\016PLUNDER_SEARCH\020\253\001\022\022\n\rPLUNDER_"
    "START\020\254\001\022\023\n\016PLUNDER_RESULT\020\255\001\022\"\n\035PLUNDER"
    "_RECEIVE_ASSIGN_REWARD\020\256\001\022\030\n\023PLUNDER_REC"
    "ORD_INFO\020\257\001\022\024\n\017PLUNDER_REVENGE\020\260\001\022#\n\036PLU"
    "NDER_REVENGE_RECEIVE_REWARD\020\261\001\022\026\n\021PLUNDE"
    "R_SHOP_INFO\020\262\001\022\025\n\020PLUNDER_SHOP_BUY\020\263\001\022\031\n"
    "\024PLUNDER_SHOP_REFRESH\020\264\001\022\022\n\rWORKSHOP_LIS"
    "T\020\322\001\022\031\n\024WORKSHOP_COLLECT_ALL\020\323\001\022\022\n\rACTIV"
    "ITY_LIST\020\334\001\022\027\n\022BUY_ACTIVITY_COUNT\020\335\001\022\032\n\025"
    "ACTIVITY_SYSTEM_SWEEP\020\336\001\022\023\n\016SET_GUIDE_ST"
    "EP\020\360\001\022\017\n\nGUIDE_LIST\020\361\001\022\021\n\014SPONSOR_LIST\020\372"
    "\001\022\021\n\014SPONSOR_SIGN\020\373\001\022\017\n\nARENA_LIST\020\204\002\022\030\n"
    "\023ARENA_FIND_OPPONENT\020\206\002\022\022\n\rARENA_ADVANCE"
    "\020\207\002\022\027\n\022ARENA_MATCH_RECORD\020\210\002\022\024\n\017ARENA_SH"
    "OP_INFO\020\216\002\022\023\n\016ARENA_SHOP_BUY\020\217\002\022\027\n\022ARENA"
    "_SHOP_REFRESH\020\220\002\022\016\n\tMAIL_LIST\020\242\002\022\016\n\tMAIL"
    "_READ\020\243\002\022\034\n\027MAIL_ATTACHMENT_RECEIVE\020\244\002\022\016"
    "\n\tMAIL_PUSH\020\245\002\022\027\n\022GOLD_EXCHANGE_LIST\020\254\002\022"
    "\026\n\021GOLD_EXCHANGE_BUY\020\255\002\022\022\n\rRECHARGE_INFO"
    "\020\266\002\022\025\n\020VIP_LEVEL_REWARD\020\267\002\022\026\n\021RECHARGE_O"
    "RDER_ID\020\270\002\022\025\n\020RECHARGE_SUCCESS\020\271\002\022\024\n\017VIP"
    "_REWARD_INFO\020\272\002\022\027\n\022VIP_COLLECT_REWARD\020\273\002"
    "\022\"\n\035COLLECT_FIRST_RECHARGE_REWARD\020\274\002\022\037\n\032"
    "DAILY_RECHARGE_REWARD_INFO\020\275\002\022\"\n\035COLLECT"
    "_DAILY_RECHARGE_REWARD\020\276\002\022\026\n\021STORY_SYSTE"
    "M_INFO\020\300\002\022\030\n\023STORY_FINISH_REWARD\020\301\002\022\030\n\023S"
    "TORY_SEASON_REWARD\020\302\002\022\027\n\022STORY_SYSTEM_SW"
    "EEP\020\303\002\022\035\n\030STORY_SYSTEM_RESET_COUNT\020\304\002\022 \n"
    "\033EXPRESSMEN_RECRUITMENT_INFO\020\312\002\022\027\n\022BUY_R"
    "ECRUIT_PERMIT\020\313\002\022\027\n\022RECRUIT_EXPRESSMAN\020\314"
    "\002\022\027\n\022TOUGHEN_EXPRESSMAN\020\315\002\022\034\n\027TOUGHEN_EX"
    "PRESSMAN_INFO\020\316\002\022\020\n\013NOTICE_INFO\020\324\002\022\024\n\017DA"
    "ILY_SIGN_INFO\020\336\002\022\017\n\nDAILY_SIGN\020\337\002\022\033\n\026OPE"
    "N_EXPRESS_SIGN_INFO\020\340\002\022\026\n\021OPEN_EXPRESS_S"
    "IGN\020\341\002\022\023\n\016GOLD_SHOP_INFO\020\350\002\022\022\n\rGOLD_SHOP"
    "_BUY\020\351\002\022\026\n\021GOLD_SHOP_REFRESH\020\352\002\022\016\n\tUSE_C"
    "DKEY\020\362\002\022\025\n\020TRADE_ROAD_SWEEP\020\367\002\022\030\n\023TRADE_"
    "ROAD_OPEN_BOX\020\370\002\022\031\n\024TRADE_ROAD_SHOP_INFO"
    "\020\371\002\022\030\n\023TRADE_ROAD_SHOP_BUY\020\372\002\022\034\n\027TRADE_R"
    "OAD_SHOP_REFRESH\020\373\002\022\024\n\017TRADE_ROAD_LIST\020\374"
    "\002\022\033\n\026TRADE_ROAD_UNLOCK_CITY\020\375\002\022\033\n\026TRADE_"
    "ROAD_OPEN_BRANCH\020\376\002\022\034\n\027TRADE_ROAD_FETCH_"
    "REWARD\020\377\002\022\037\n\032TRADE_ROAD_REFRESH_PLAYERS\020"
    "\200\003\022(\n#TRADE_ROAD_SELECT_PLAYER_EXPRESSMA"
    "N\020\201\003\022+\n&TRADE_ROAD_SELECT_OPERATION_EXPR"
    "ESSMAN\020\202\003\022%\n TRADE_ROAD_BRANCH_CHECK_OPE"
    "RATED\020\203\003\022\025\n\020TRADE_ROAD_RESET\020\204\003\022 \n\033TRADE"
    "_ROAD_FETCH_ALL_REWARD\020\205\003\022\027\n\022OFFICE_INVA"
    "DE_CRAP\020\206\003\022\027\n\022OFFICE_INVADE_GIFT\020\207\003\022\035\n\030O"
    "FFICE_INVADE_RAND_EVENT\020\210\003\022\027\n\022OFFICE_INV"
    "ADE_DICE\020\211\003\022\031\n\024OFFICE_INVADE_COMBAT\020\212\003\022\037"
    "\n\032OFFICE_INVADE_CHOOSE_ROUTE\020\213\003\022\027\n\022OFFIC"
    "E_INVADE_INFO\020\214\003\022\031\n\024OFFICE_INVADE_DEPLOY"
    "\020\215\003\022\037\n\032OFFICE_INVADE_MAIN_STORAGE\020\216\003\022\026\n\021"
    "OFFICE_INVADE_END\020\217\003\022!\n\034OFFICE_INVADE_BE"
    "ING_ATTACKED\020\220\003\022\032\n\025OFFICE_INVADE_PRODUCE"
    "\020\221\003\022\032\n\025OFFICE_INVADE_COLLECT\020\222\003\022\031\n\024OFFIC"
    "E_INVADE_SEARCH\020\223\003\022\031\n\024OFFICE_INVADE_ATTA"
    "CK\020\224\003\022 \n\033OFFICE_INVADE_CANCEL_ATTACK\020\225\003\022"
    "\027\n\022OFFICE_INVADE_TRAP\020\226\003\022!\n\034OFFICE_INVAD"
    "E_ATTACK_TIMEOUT\020\227\003\022\"\n\035OFFICE_INVADE_PRO"
    "DUCE_UPGRADE\020\230\003\022&\n!OFFICE_INVADE_DEFENSE"
    "_RECORD_INFO\020\231\003\022&\n!OFFICE_INVADE_REVENGE"
    "_TARGET_INFO\020\232\003\022\034\n\027OPERATING_ACTIVITY_IN"
    "FO\020\256\003\022\037\n\032OPERATING_ACTIVITY_COLLECT\020\257\003\022\017"
    "\n\nUNION_LIST\020\270\003\022\021\n\014UNION_SEARCH\020\271\003\022\021\n\014UN"
    "ION_CREATE\020\272\003\022\017\n\nUNION_EXIT\020\273\003\022\036\n\031UNION_"
    "CHANGE_ANNOUNCEMENT\020\274\003\022\026\n\021UNION_CHANGE_N"
    "AME\020\275\003\022\026\n\021UNION_DISSOLUTION\020\276\003\022\021\n\014UNION_"
    "ASSIGN\020\277\003\022\032\n\025UNION_KICK_OUT_MEMBER\020\300\003\022\025\n"
    "\020UNION_APPLY_JOIN\020\301\003\022\034\n\027UNION_CANCEL_APP"
    "LY_JOIN\020\302\003\022\021\n\014UNION_DONATE\020\303\003\022\022\n\rUNION_W"
    "ORSHIP\020\304\003\022!\n\034UNION_COLLECT_WORSHIP_REWAR"
    "D\020\305\003\022\021\n\014UNION_UNIONS\020\306\003\022\032\n\025UNION_REFRESH"
    "_MEMBERS\020\307\003\022\025\n\020UNION_DEAL_APPLY\020\310\003\022\020\n\013UN"
    "ION_ERROR\020\311\003\022\027\n\022UNION_STATUS_DEALT\020\312\003\022\033\n"
    "\026UNION_REFRESH_ABSTRACT\020\313\003\022\030\n\023UNION_MEMB"
    "ER_DETAIL\020\314\003\022\030\n\023UNION_SET_MIN_LEVEL\020\315\003\022\033"
    "\n\026UNION_SET_VERIFICATION\020\316\003\022\"\n\035UNION_REF"
    "RESH_PENDING_MEMBERS\020\317\003\022\030\n\023UNION_MANAGE_"
    "ELDERS\020\320\003\022\024\n\017UNION_SHOP_INFO\020\321\003\022\023\n\016UNION"
    "_SHOP_BUY\020\322\003\022\027\n\022UNION_SHOP_REFRESH\020\323\003\022 \n"
    "\033UNION_COLLECT_ACTIVE_REWARD\020\324\003\022\021\n\014RANKI"
    "NG_LIST\020\340\003\022\027\n\022RANKING_EXTRA_INFO\020\341\003\022\025\n\020G"
    "ROWTH_FUND_INFO\020\352\003\022\024\n\017BUY_GROWTH_FUND\020\353\003"
    "\022\030\n\023COLLECT_GROWTH_FUND\020\354\003\022\023\n\016CHAT_ROOM_"
    "INFO\020\376\003\022\026\n\021UNION_ROOM_CHANGE\020\377\003\022\025\n\020CHAT_"
    "PLAYER_INFO\020\200\004\022\021\n\014STREET_ENTER\020\210\004\022\021\n\014STR"
    "EET_LEAVE\020\211\004\022\020\n\013STREET_MOVE\020\212\004\022\017\n\nSTREET"
    "_ADD\020\213\004\022\022\n\rSTREET_REMOVE\020\214\004\022\020\n\013STREET_SY"
    "NC\020\215\004\022\025\n\020RANDOM_SHOP_INFO\020\246\004\022\025\n\020RANDOM_S"
    "HOP_OPEN\020\247\004\022\026\n\021RANDOM_SHOP_CLOSE\020\250\004\022\024\n\017R"
    "ANDOM_SHOP_BUY\020\251\004\022\017\n\nBADGE_INFO\020\260\004\022\016\n\tBA"
    "DGE_USE\020\261\004\022\034\n\027GET_ALL_INVITATION_INFO\020\272\004"
    "\022\033\n\026OBTAIN_INVITING_REWARD\020\273\004\022\032\n\025OBTAIN_"
    "INVITED_REWARD\020\274\004\022\023\n\016SET_INVITE_KEY\020\275\004\022\034"
    "\n\027GET_ALL_WORLD_BOSS_INFO\020\330\004\022\035\n\030GET_HARM"
    "_RANKING_TO_BOSS\020\331\004\022\032\n\025REFRESH_WORLD_BOS"
    "S_CD\020\332\004\022\034\n\027WORLD_BOSS_START_BATTLE\020\333\004\022\032\n"
    "\025WORLD_BOSS_END_BATTLE\020\334\004\022!\n\034GET_WORLD_B"
    "OSS_SCORE_RANKING\020\335\004\022 \n\033WORLD_BOSS_START"
    "_BATTLE_PRE\020\336\004\022!\n\034WORLD_BOSS_NOTIFY_BOSS"
    "_STAGE\020\337\004\022#\n\036WORLD_BOSS_NOTIFY_BATTLE_ST"
    "ATE\020\340\004\022\033\n\026CARNIVAL_ACTIVITY_INFO\020\354\004\022\036\n\031C"
    "ARNIVAL_ACTIVITY_COLLECT\020\355\004\022\'\n\"CARNIVAL_"
    "ACTIVITY_PROGRESS_COLLECT\020\356\004\022\030\n\023COUNTRY_"
    "BATTLE_INFO\020\366\004\022\031\n\024COUNTRY_BATTLE_WORLD\020\367"
    "\004\022\034\n\027COUNTRY_BATTLE_PROVINCE\020\370\004\022\030\n\023COUNT"
    "RY_BATTLE_CITY\020\371\004\022\034\n\027COUNTRY_BATTLE_COMM"
    "ERCE\020\372\004\022\"\n\035COUNTRY_BATTLE_REWARD_COLLECT"
    "\020\373\004\022#\n\036COUNTRY_BATTLE_GIVEUP_COMMERCE\020\374\004"
    "\022\037\n\032COUNTRY_BATTLE_START_ERROR\020\375\004\022\037\n\032COU"
    "NTRY_BATTLE_MY_COMMERCE\020\376\004\022*\n%MATERIALS_"
    "RECYCLE_DECOMPOSE_MATERIALS\020\224\005\022\037\n\032MATERI"
    "ALS_RECYCLE_OPEN_BOX\020\225\005\022\037\n\032MATERIALS_REC"
    "YCLE_BOX_INFO\020\226\005\022\027\n\022SOULS_RECYCLE_INFO\020\236"
    "\005\022\033\n\026SOULS_RECYCLE_OPEN_BOX\020\237\005\022\022\n\rSOUL_S"
    "HOP_BUY\020\240\005\022\026\n\021SOUL_SHOP_REFRESH\020\241\005\022\025\n\020FR"
    "IEND_INFO_LIST\020\250\005\022\022\n\rFRIEND_SEARCH\020\251\005\022\026\n"
    "\021FRIEND_ADD_FOLLOW\020\252\005\022\031\n\024FRIEND_CANCLE_F"
    "OLLOW\020\253\005\022\025\n\020FRIEND_ADD_BLACK\020\254\005\022\030\n\023FRIEN"
    "D_CANCLE_BLACK\020\255\005\022\027\n\022FRIEND_DETAIL_INFO\020"
    "\256\005\022\031\n\024WORLD_BOSS_SHOP_INFO\020\320\005\022\030\n\023WORLD_B"
    "OSS_SHOP_BUY\020\321\005\022\027\n\022REGISTER_AS_CLIENT\020\314\010"
    "\022\027\n\022REGISTER_AS_SERVER\020\315\010\022\026\n\021GATEWAY_KEE"
    "PALIVE\020\316\010\022\026\n\021PS_PLUNDER_SEARCH\020\340\010\022\024\n\017PS_"
    "ESCORT_START\020\341\010\022\022\n\rPS_ESCORT_END\020\342\010\022\025\n\020P"
    "S_PLUNDER_START\020\343\010\022\034\n\027PS_SEARCH_ASSIGNED"
    "_TEAM\020\344\010\022\025\n\020GS_PLUNDER_START\020\352\010\022\026\n\021GS_PL"
    "UNDER_RESULT\020\353\010\022\033\n\026GS_PLUNDER_ASSIGN_TAS"
    "K\020\354\010\022\027\n\022GS_PLUNDER_REVENGE\020\355\010\022\033\n\026DB_PROT"
    "OBUF_REFLECTION\020\260\t\022\r\n\010DB_LOGIN\020\261\t\022\030\n\023DB_"
    "CREATE_CHARACTER\020\262\t\022\017\n\nDB_PRELOAD\020\263\t\022\030\n\023"
    "DB_PRELOAD_FINISHED\020\264\t\022\022\n\rDB_GM_COMMAND\020"
    "\265\t\022\023\n\016DB_DEL_ACCOUNT\020\266\t\022\017\n\nDB_RANKING\020\267\t"
    "\022\023\n\016DB_LOAD_PLAYER\020\270\t\022\026\n\021DB_REFLECTION_A"
    "CK\020\271\t\022\016\n\tDB_UNIONS\020\272\t\022\017\n\nGM_COMMAND\020\224\n\022 "
    "\n\033PAY_GENERATE_RECHARGE_ORDER\020\236\n\022 \n\033PAY_"
    "COMPLETE_RECHARGE_ORDER\020\237\n\022\026\n\021GS_IS_INVA"
    "DE_INFO\020\250\n\022\030\n\023GS_IS_INVADE_SEARCH\020\251\n\022\030\n\023"
    "IS_GS_INVADE_SEARCH\020\252\n\022\030\n\023GS_GS_INVADE_S"
    "EARCH\020\253\n\022 \n\033GS_GS_INVADE_ATTACK_REQUEST\020"
    "\254\n\022!\n\034GS_GS_INVADE_ATTACK_RESPONSE\020\255\n\022 \n"
    "\033GS_GS_INVADE_ATTACK_CAPTURE\020\256\n\022\034\n\027GS_GS"
    "_INVADE_ATTACK_END\020\257\n\022\035\n\030GS_GS_REVENGE_S"
    "EARCH_REQ\020\260\n\022\035\n\030GS_GS_REVENGE_SEARCH_REP"
    "\020\261\n\022\024\n\017GS_CS_USE_CDKEY\020\262\n\022\024\n\017BS_ESCORT_S"
    "TART\020\370\n\022\022\n\rBS_ESCORT_END\020\371\n\022\027\n\022GC_CREAT_"
    "CHAT_ROOM\020\334\013\022\031\n\024GC_DESTORY_CHAT_ROOM\020\335\013\022"
    "\036\n\031GC_SEND_CHAT_ROOM_MESSAGE\020\336\013\022\033\n\026CS_CO"
    "UNTRY_BATTLE_INFO\020\300\014\022\034\n\027CS_COUNTRY_BATTL"
    "E_WORLD\020\301\014\022\037\n\032CS_COUNTRY_BATTLE_PROVINCE"
    "\020\302\014\022\033\n\026CS_COUNTRY_BATTLE_CITY\020\303\014\022\037\n\032CS_C"
    "OUNTRY_BATTLE_COMMERCE\020\304\014\022%\n CS_COUNTRY_"
    "BATTLE_REWARD_COLLECT\020\305\014\022&\n!CS_COUNTRY_B"
    "ATTLE_GIVEUP_COMMERCE\020\306\014\022\"\n\035CS_COUNTRY_B"
    "ATTLE_PLAYER_INFO\020\311\014\022#\n\036CS_COUNTRY_BATTL"
    "E_KICKOUT_INFO\020\312\014\022\"\n\035CS_COUNTRY_BATTLE_M"
    "Y_COMMERCE\020\313\014\022\024\n\017CS_ESCORT_START\020\314\014\022\022\n\rC"
    "S_ESCORT_END\020\315\014\022\"\n\035CS_COUNTRY_BATTLE_REC"
    "ORD_INFO\020\316\014\022\030\n\023FS_FRIEND_INFO_SYNC\020\244\r\022\030\n"
    "\023FS_FRIEND_INFO_LIST\020\245\r\022\025\n\020FS_FRIEND_SEA"
    "RCH\020\246\r\022\031\n\024FS_FRIEND_ADD_FOLLOW\020\247\r\022\034\n\027FS_"
    "FRIEND_CANCLE_FOLLOW\020\250\r\022\030\n\023FS_FRIEND_ADD"
    "_BLACK\020\251\r\022\033\n\026FS_FRIEND_CANCLE_BLACK\020\252\r\022\032"
    "\n\025FS_FRIEND_DETAIL_INFO\020\253\r\022\024\n\017FS_FRIEND_"
    "PROBE\020\254\r", 20688);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_enum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5fenum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5fenum_2eproto {
  StaticDescriptorInitializer_common_5fenum_2eproto() {
    protobuf_AddDesc_common_5fenum_2eproto();
  }
} static_descriptor_initializer_common_5fenum_2eproto_;
const ::google::protobuf::EnumDescriptor* _AssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _AssetType_descriptor_;
}
bool _AssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _AssetSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _AssetSource_descriptor_;
}
bool _AssetSource_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RobotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RobotType_descriptor_;
}
bool _RobotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _SystemId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _SystemId_descriptor_;
}
bool _SystemId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 40:
    case 45:
    case 46:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _AdvanceMatchResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _AdvanceMatchResult_descriptor_;
}
bool _AdvanceMatchResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ArenaSeasonIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ArenaSeasonIndex_descriptor_;
}
bool _ArenaSeasonIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ArenaOpponentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ArenaOpponentType_descriptor_;
}
bool _ArenaOpponentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CarrierUp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CarrierUp_descriptor_;
}
bool _CarrierUp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CDKeyError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CDKeyError_descriptor_;
}
bool _CDKeyError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _DailyTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _DailyTaskType_descriptor_;
}
bool _DailyTaskType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _EscortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _EscortType_descriptor_;
}
bool _EscortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _EscortEndStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _EscortEndStatus_descriptor_;
}
bool _EscortEndStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionJoinedStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionJoinedStatus_descriptor_;
}
bool _UnionJoinedStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionMemberType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionMemberType_descriptor_;
}
bool _UnionMemberType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionMemberOptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionMemberOptType_descriptor_;
}
bool _UnionMemberOptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionErrorType_descriptor_;
}
bool _UnionErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionWorshipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionWorshipType_descriptor_;
}
bool _UnionWorshipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionApplyJoinStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionApplyJoinStatus_descriptor_;
}
bool _UnionApplyJoinStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionAssignResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionAssignResult_descriptor_;
}
bool _UnionAssignResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionManageEldersResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionManageEldersResult_descriptor_;
}
bool _UnionManageEldersResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _UnionDealApplyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _UnionDealApplyStatus_descriptor_;
}
bool _UnionDealApplyStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RaffleGoodsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RaffleGoodsType_descriptor_;
}
bool _RaffleGoodsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RafflePayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RafflePayType_descriptor_;
}
bool _RafflePayType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RaffleCountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RaffleCountType_descriptor_;
}
bool _RaffleCountType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RaffleSoulGoodsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RaffleSoulGoodsType_descriptor_;
}
bool _RaffleSoulGoodsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RecruitPermitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RecruitPermitType_descriptor_;
}
bool _RecruitPermitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ToughenExpressmanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ToughenExpressmanType_descriptor_;
}
bool _ToughenExpressmanType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _Status_descriptor_;
}
bool _Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _OfficeInvadeFailureReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _OfficeInvadeFailureReason_descriptor_;
}
bool _OfficeInvadeFailureReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _FortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _FortType_descriptor_;
}
bool _FortType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _GridEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _GridEventType_descriptor_;
}
bool _GridEventType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _GridTrapEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _GridTrapEventType_descriptor_;
}
bool _GridTrapEventType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _GridRandEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _GridRandEventType_descriptor_;
}
bool _GridRandEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _OfficeInvadeProduceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _OfficeInvadeProduceType_descriptor_;
}
bool _OfficeInvadeProduceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _OfficeInvadeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _OfficeInvadeType_descriptor_;
}
bool _OfficeInvadeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RefreshDay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RefreshDay_descriptor_;
}
bool _RefreshDay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _PlunderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _PlunderStatus_descriptor_;
}
bool _PlunderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _PlunderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _PlunderType_descriptor_;
}
bool _PlunderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _PlunderRevengeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _PlunderRevengeType_descriptor_;
}
bool _PlunderRevengeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _PlunderResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _PlunderResult_descriptor_;
}
bool _PlunderResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _PlunderRecordStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _PlunderRecordStatus_descriptor_;
}
bool _PlunderRecordStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _TaskDenyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _TaskDenyResult_descriptor_;
}
bool _TaskDenyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _TradeRoadBranchLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _TradeRoadBranchLevel_descriptor_;
}
bool _TradeRoadBranchLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _TradeRoadBoxChestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _TradeRoadBoxChestType_descriptor_;
}
bool _TradeRoadBoxChestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _TradeRoadBranchStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _TradeRoadBranchStatus_descriptor_;
}
bool _TradeRoadBranchStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _TradeRoadCityStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _TradeRoadCityStatus_descriptor_;
}
bool _TradeRoadCityStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _StorySeasonRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _StorySeasonRewardType_descriptor_;
}
bool _StorySeasonRewardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ExpressmanStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ExpressmanStatus_descriptor_;
}
bool _ExpressmanStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ExpressmanOrigin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ExpressmanOrigin_descriptor_;
}
bool _ExpressmanOrigin_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _VIPEffectId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _VIPEffectId_descriptor_;
}
bool _VIPEffectId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _OperatingAchievementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _OperatingAchievementType_descriptor_;
}
bool _OperatingAchievementType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CarnivalTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CarnivalTaskType_descriptor_;
}
bool _CarnivalTaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CarnivalCalcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CarnivalCalcType_descriptor_;
}
bool _CarnivalCalcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RankingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RankingType_descriptor_;
}
bool _RankingType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RankingExtraInfoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RankingExtraInfoType_descriptor_;
}
bool _RankingExtraInfoType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ChatRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ChatRoomType_descriptor_;
}
bool _ChatRoomType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ChatEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ChatEventType_descriptor_;
}
bool _ChatEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _RandomShopRefreshStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _RandomShopRefreshStatus_descriptor_;
}
bool _RandomShopRefreshStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _BadgeAchievementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _BadgeAchievementType_descriptor_;
}
bool _BadgeAchievementType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _WorldBossStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _WorldBossStatus_descriptor_;
}
bool _WorldBossStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CountryBattleCommerceStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CountryBattleCommerceStatus_descriptor_;
}
bool _CountryBattleCommerceStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _MaterialRecycleBoxChestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _MaterialRecycleBoxChestType_descriptor_;
}
bool _MaterialRecycleBoxChestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _CountryBattleStartError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _CountryBattleStartError_descriptor_;
}
bool _CountryBattleStartError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _FriendSearchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _FriendSearchType_descriptor_;
}
bool _FriendSearchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _FriendOptStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _FriendOptStatus_descriptor_;
}
bool _FriendOptStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* _ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return _ErrorType_descriptor_;
}
bool _ErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 50:
    case 51:
    case 52:
    case 53:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 100:
    case 110:
    case 112:
    case 120:
    case 121:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 160:
    case 161:
    case 162:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 210:
    case 211:
    case 220:
    case 221:
    case 222:
    case 240:
    case 241:
    case 250:
    case 251:
    case 260:
    case 262:
    case 263:
    case 264:
    case 270:
    case 271:
    case 272:
    case 290:
    case 291:
    case 292:
    case 293:
    case 300:
    case 301:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 340:
    case 350:
    case 351:
    case 352:
    case 353:
    case 360:
    case 361:
    case 362:
    case 370:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 430:
    case 431:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 480:
    case 481:
    case 490:
    case 491:
    case 492:
    case 510:
    case 511:
    case 512:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 550:
    case 551:
    case 552:
    case 553:
    case 560:
    case 561:
    case 570:
    case 571:
    case 572:
    case 573:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 620:
    case 621:
    case 622:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 660:
    case 661:
    case 662:
    case 670:
    case 671:
    case 672:
    case 673:
    case 680:
    case 681:
    case 682:
    case 683:
    case 684:
    case 685:
    case 686:
    case 720:
    case 721:
    case 1100:
    case 1101:
    case 1102:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1300:
    case 1310:
    case 1311:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 1329:
    case 1330:
    case 1400:
    case 1401:
    case 1500:
    case 1501:
    case 1502:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1611:
    case 1612:
    case 1613:
    case 1614:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

// @@protoc_insertion_point(global_scope)
